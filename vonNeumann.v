/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

///////////////////////////////////////////////////////////////////////////////
// Description: SPI (Serial Peripheral Interface) Master
//              Creates master based on input configuration.
//              Sends a byte one bit at a time on MOSI
//              Will also receive byte data one bit at a time on MISO.
//              Any data on input byte will be shipped out on MOSI.
//
//              To kick-off transaction, user must pulse i_TX_DV.
//              This module supports multi-byte transmissions by pulsing
//              i_TX_DV and loading up i_TX_Byte when o_TX_Ready is high.
//
//              This module is only responsible for controlling Clk, MOSI, 
//              and MISO.  If the SPI peripheral requires a chip-select, 
//              this must be done at a higher level.
//
// Note:        i_Clk must be at least 2x faster than i_SPI_Clk
//
// Parameters:  SPI_MODE, can be 0, 1, 2, or 3.  See above.
//              Can be configured in one of 4 modes:
//              Mode | Clock Polarity (CPOL/CKP) | Clock Phase (CPHA)
//               0   |             0             |        0
//               1   |             0             |        1
//               2   |             1             |        0
//               3   |             1             |        1
//              More: https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus#Mode_numbers
//              CLKS_PER_HALF_BIT - Sets frequency of o_SPI_Clk.  o_SPI_Clk is
//              derived from i_Clk.  Set to integer number of clocks for each
//              half-bit of SPI data.  E.g. 100 MHz i_Clk, CLKS_PER_HALF_BIT = 2
//              would create o_SPI_CLK of 25 MHz.  Must be >= 2
//
///////////////////////////////////////////////////////////////////////////////

module SPI_Master
  #(parameter SPI_MODE = 0,
    parameter CLKS_PER_HALF_BIT = 2)
  (
   // Control/Data Signals,
   input        i_Rst_L,     // FPGA Reset
   input        i_Clk,       // FPGA Clock
   
   // TX (MOSI) Signals
   input [7:0]  i_TX_Byte,        // Byte to transmit on MOSI
   input        i_TX_DV,          // Data Valid Pulse with i_TX_Byte
   output reg   o_TX_Ready,       // Transmit Ready for next byte
   
   // RX (MISO) Signals
   output reg       o_RX_DV,     // Data Valid pulse (1 clock cycle)
   output reg [7:0] o_RX_Byte,   // Byte received on MISO

   // SPI Interface
   output reg o_SPI_Clk,
   input      i_SPI_MISO,
   output reg o_SPI_MOSI
   );

  // SPI Interface (All Runs at SPI Clock Domain)
  wire w_CPOL;     // Clock polarity
  wire w_CPHA;     // Clock phase

  reg [$clog2(CLKS_PER_HALF_BIT*2)-1:0] r_SPI_Clk_Count;
  reg r_SPI_Clk;
  reg [4:0] r_SPI_Clk_Edges;
  reg r_Leading_Edge;
  reg r_Trailing_Edge;
  reg       r_TX_DV;
  reg [7:0] r_TX_Byte;

  reg [2:0] r_RX_Bit_Count;
  reg [2:0] r_TX_Bit_Count;

  // CPOL: Clock Polarity
  // CPOL=0 means clock idles at 0, leading edge is rising edge.
  // CPOL=1 means clock idles at 1, leading edge is falling edge.
  assign w_CPOL  = (SPI_MODE == 2) | (SPI_MODE == 3);

  // CPHA: Clock Phase
  // CPHA=0 means the "out" side changes the data on trailing edge of clock
  //              the "in" side captures data on leading edge of clock
  // CPHA=1 means the "out" side changes the data on leading edge of clock
  //              the "in" side captures data on the trailing edge of clock
  assign w_CPHA  = (SPI_MODE == 1) | (SPI_MODE == 3);



  // Purpose: Generate SPI Clock correct number of times when DV pulse comes
  always @(posedge i_Clk or negedge i_Rst_L)
  begin
    if (~i_Rst_L)
    begin
      o_TX_Ready      <= 1'b0;
      r_SPI_Clk_Edges <= 0;
      r_Leading_Edge  <= 1'b0;
      r_Trailing_Edge <= 1'b0;
      r_SPI_Clk       <= w_CPOL; // assign default state to idle state
      r_SPI_Clk_Count <= 0;
    end
    else
    begin

      // Default assignments
      r_Leading_Edge  <= 1'b0;
      r_Trailing_Edge <= 1'b0;
      
      if (i_TX_DV)
      begin
        o_TX_Ready      <= 1'b0;
        r_SPI_Clk_Edges <= 16;  // Total # edges in one byte ALWAYS 16
      end
      else if (r_SPI_Clk_Edges > 0)
      begin
        o_TX_Ready <= 1'b0;
        
        if (r_SPI_Clk_Count == CLKS_PER_HALF_BIT*2-1)
        begin
          r_SPI_Clk_Edges <= r_SPI_Clk_Edges - 1'b1;
          r_Trailing_Edge <= 1'b1;
          r_SPI_Clk_Count <= 0;
          r_SPI_Clk       <= ~r_SPI_Clk;
        end
        else if (r_SPI_Clk_Count == CLKS_PER_HALF_BIT-1)
        begin
          r_SPI_Clk_Edges <= r_SPI_Clk_Edges - 1'b1;
          r_Leading_Edge  <= 1'b1;
          r_SPI_Clk_Count <= r_SPI_Clk_Count + 1'b1;
          r_SPI_Clk       <= ~r_SPI_Clk;
        end
        else
        begin
          r_SPI_Clk_Count <= r_SPI_Clk_Count + 1'b1;
        end
      end  
      else
      begin
        o_TX_Ready <= 1'b1;
      end
      
      
    end // else: !if(~i_Rst_L)
  end // always @ (posedge i_Clk or negedge i_Rst_L)


  // Purpose: Register i_TX_Byte when Data Valid is pulsed.
  // Keeps local storage of byte in case higher level module changes the data
  always @(posedge i_Clk or negedge i_Rst_L)
  begin
    if (~i_Rst_L)
    begin
      r_TX_Byte <= 8'h00;
      r_TX_DV   <= 1'b0;
    end
    else
      begin
        r_TX_DV <= i_TX_DV; // 1 clock cycle delay
        if (i_TX_DV)
        begin
          r_TX_Byte <= i_TX_Byte;
        end
      end // else: !if(~i_Rst_L)
  end // always @ (posedge i_Clk or negedge i_Rst_L)


  // Purpose: Generate MOSI data
  // Works with both CPHA=0 and CPHA=1
  always @(posedge i_Clk or negedge i_Rst_L)
  begin
    if (~i_Rst_L)
    begin
      o_SPI_MOSI     <= 1'b0;
      r_TX_Bit_Count <= 3'b111; // send MSb first
    end
    else
    begin
      // If ready is high, reset bit counts to default
      if (o_TX_Ready)
      begin
        r_TX_Bit_Count <= 3'b111;
      end
      // Catch the case where we start transaction and CPHA = 0
      else if (r_TX_DV & ~w_CPHA)
      begin
        o_SPI_MOSI     <= r_TX_Byte[3'b111];
        r_TX_Bit_Count <= 3'b110;
      end
      else if ((r_Leading_Edge & w_CPHA) | (r_Trailing_Edge & ~w_CPHA))
      begin
        r_TX_Bit_Count <= r_TX_Bit_Count - 1'b1;
        o_SPI_MOSI     <= r_TX_Byte[r_TX_Bit_Count];
      end
    end
  end


  // Purpose: Read in MISO data.
  always @(posedge i_Clk or negedge i_Rst_L)
  begin
    if (~i_Rst_L)
    begin
      o_RX_Byte      <= 8'h00;
      o_RX_DV        <= 1'b0;
      r_RX_Bit_Count <= 3'b111;
    end
    else
    begin

      // Default Assignments
      o_RX_DV   <= 1'b0;

      if (o_TX_Ready) // Check if ready is high, if so reset bit count to default
      begin
        r_RX_Bit_Count <= 3'b111;
      end
      else if ((r_Leading_Edge & ~w_CPHA) | (r_Trailing_Edge & w_CPHA))
      begin
        o_RX_Byte[r_RX_Bit_Count] <= i_SPI_MISO;  // Sample data
        r_RX_Bit_Count            <= r_RX_Bit_Count - 1'b1;
        if (r_RX_Bit_Count == 3'b000)
        begin
          o_RX_DV   <= 1'b1;   // Byte done, pulse Data Valid
        end
      end
    end
  end
  
  
  // Purpose: Add clock delay to signals for alignment.
  always @(posedge i_Clk or negedge i_Rst_L)
  begin
    if (~i_Rst_L)
    begin
      o_SPI_Clk  <= w_CPOL;
    end
    else
      begin
        o_SPI_Clk <= r_SPI_Clk;
      end // else: !if(~i_Rst_L)
  end // always @ (posedge i_Clk or negedge i_Rst_L)
  

endmodule // SPI_Master


module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module DIG_D_FF_AS_1bit
#(
    parameter Default = 0
)
(
   input Set,
   input D,
   input C,
   input Clr,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q  = ~state;

    always @ (posedge C or posedge Clr or posedge Set)
    begin
        if (Set)
            state <= 1'b1;
        else if (Clr)
            state <= 'h0;
        else
            state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule


module DIG_Sub #(
    parameter Bits = 2
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits-1):0] s,
    output c_o
);
    wire [Bits:0] temp;

    assign temp = a - b - c_i;
    assign s = temp[(Bits-1):0];
    assign c_o = temp[Bits];
endmodule


module Mux_8x1_NBits #(
    parameter Bits = 2
)
(
    input [2:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule

module DIG_JK_FF
#(
    parameter Default = 1'b0
)
(
   input J,
   input C,
   input K,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        if (~J & K)
            state <= 1'b0;
         else if (J & ~K)
            state <= 1'b1;
         else if (J & K)
            state <= ~state;
    end

    initial begin
        state = Default;
    end
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module spiden (
  input spi_miso,
  input [15:0] Address,
  input clk,
  input st,
  input [15:0] DataIn,
  input ld,
  input spi_rst,
  output spi_clk,
  output spi_mosi,
  output Busy,
  output [15:0] data_out
);
  wire s0;
  wire [7:0] s1;
  wire Tx_Ready;
  wire Rx_Ready;
  wire [7:0] data_Rx;
  wire load;
  wire [7:0] ramCommand;
  wire Selected;
  wire [15:0] s2;
  wire [7:0] ramAdres_0;
  wire [7:0] ramAdres_1;
  wire [2:0] s3;
  wire [7:0] ramData_1;
  wire [7:0] ramData_0;
  wire [7:0] s4;
  wire [15:0] s5;
  wire store;
  wire s6;
  wire s7;
  wire s8;
  wire busy_N;
  wire s9;
  wire s10;
  wire rstSpi;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire [7:0] s15;
  wire s16;
  wire [7:0] s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire [2:0] s23;
  assign s18 = (st & clk);
  assign s20 = (ld & clk);
  // SPI_Master
  SPI_Master SPI_Master_i0 (
    .i_Rst_L( s0 ),
    .i_Clk( clk ),
    .i_TX_Byte( s1 ),
    .i_TX_DV( Tx_Ready ),
    .i_SPI_MISO( spi_miso ),
    .o_TX_Ready( Tx_Ready ),
    .o_RX_DV( Rx_Ready ),
    .o_RX_Byte( data_Rx ),
    .o_SPI_Clk( spi_clk ),
    .o_SPI_MOSI( spi_mosi )
  );
  // RamAddress
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i1 (
    .D( Address ),
    .C( clk ),
    .en( Selected ),
    .Q( s2 )
  );
  // RamData
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i2 (
    .D( DataIn ),
    .C( clk ),
    .en( Selected ),
    .Q( s5 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i3 (
    .Set( s18 ),
    .D( store ),
    .C( 1'b1 ),
    .Clr( s19 ),
    .Q( store )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i4 (
    .Set( s20 ),
    .D( load ),
    .C( 1'b1 ),
    .Clr( s21 ),
    .Q( load )
  );
  assign s21 = (rstSpi & ~ ld);
  assign s19 = (rstSpi & ~ st);
  assign rstSpi = (spi_rst | s10);
  assign ramCommand[0] = load;
  assign ramCommand[1] = 1'b1;
  assign ramCommand[2] = 1'b0;
  assign ramCommand[3] = 1'b0;
  assign ramCommand[4] = 1'b0;
  assign ramCommand[5] = 1'b0;
  assign ramCommand[6] = 1'b0;
  assign ramCommand[7] = 1'b0;
  assign Selected = (load | store);
  assign s22 = (Tx_Ready | rstSpi);
  assign ramAdres_0 = s2[7:0];
  assign ramAdres_1 = s2[15:8];
  assign ramData_0 = s5[7:0];
  assign ramData_1 = s5[15:8];
  Mux_2x1 Mux_2x1_i5 (
    .sel( rstSpi ),
    .in_0( Selected ),
    .in_1( 1'b0 ),
    .out( s0 )
  );
  assign s9 = (Selected ^ rstSpi);
  assign Busy = (~ rstSpi & Selected);
  DIG_Counter_Nbit #(
    .Bits(3)
  )
  DIG_Counter_Nbit_i6 (
    .en( 1'b1 ),
    .C( s22 ),
    .clr( rstSpi ),
    .out( s23 )
  );
  DIG_Sub #(
    .Bits(3)
  )
  DIG_Sub_i7 (
    .a( s23 ),
    .b( 3'b1 ),
    .c_i( 1'b0 ),
    .s( s3 )
  );
  Mux_8x1_NBits #(
    .Bits(8)
  )
  Mux_8x1_NBits_i8 (
    .sel( s3 ),
    .in_0( ramCommand ),
    .in_1( ramAdres_1 ),
    .in_2( ramAdres_0 ),
    .in_3( ramData_1 ),
    .in_4( ramData_0 ),
    .in_5( 8'b0 ),
    .in_6( 8'b0 ),
    .in_7( 8'b0 ),
    .out( s4 )
  );
  assign s6 = s3[0];
  assign s7 = s3[1];
  assign s8 = s3[2];
  assign s12 = (s8 & ~ s7 & ~ s6);
  assign s13 = (s6 & s7 & ~ s8);
  assign busy_N = (Rx_Ready & ((~ s6 & ~ s7 & s8) | (s12 & load)));
  assign s11 = ((s12 | s13) & load);
  assign s14 = (s12 & load);
  assign s16 = (s13 & load);
  // Reset
  DIG_JK_FF #(
    .Default(0)
  )
  DIG_JK_FF_i9 (
    .J( busy_N ),
    .C( clk ),
    .K( s9 ),
    .Q( s10 )
  );
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i10 (
    .sel( s11 ),
    .in_0( s4 ),
    .in_1( 8'b0 ),
    .out( s1 )
  );
  DIG_Register_BUS #(
    .Bits(8)
  )
  DIG_Register_BUS_i11 (
    .D( data_Rx ),
    .C( Rx_Ready ),
    .en( s14 ),
    .Q( s15 )
  );
  DIG_Register_BUS #(
    .Bits(8)
  )
  DIG_Register_BUS_i12 (
    .D( data_Rx ),
    .C( Rx_Ready ),
    .en( s16 ),
    .Q( s17 )
  );
  assign data_out[7:0] = s15;
  assign data_out[15:8] = s17;
endmodule

module CompSigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = $signed(a) > $signed(b);
    assign \= = $signed(a) == $signed(b);
    assign \< = $signed(a) < $signed(b);
endmodule


module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module Mux_8x1
(
    input [2:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    input in_4,
    input in_5,
    input in_6,
    input in_7,
    output reg out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_CounterPreset #(
    parameter Bits = 2,
    parameter maxValue = 4
)
(
    input C,
    input en,
    input clr,
    input dir,
    input [(Bits-1):0] in,
    input ld,
    output [(Bits-1):0] out,
    output ovf
);

    reg [(Bits-1):0] count = 'h0;

    function [(Bits-1):0] maxVal (input [(Bits-1):0] maxv);
        if (maxv == 0)
            maxVal = (1 << Bits) - 1;
        else
            maxVal = maxv;
    endfunction

    assign out = count;
    assign ovf = ((count == maxVal(maxValue) & dir == 1'b0)
                  | (count == 'b0 & dir == 1'b1))? en : 1'b0;

    always @ (posedge C) begin
        if (clr == 1'b1)
            count <= 'h0;
        else if (ld == 1'b1)
            count <= in;
        else if (en == 1'b1) begin
            if (dir == 1'b0) begin
                if (count == maxVal(maxValue))
                    count <= 'h0;
                else
                    count <= count + 1'b1;
            end
            else begin
                if (count == 'h0)
                    count <= maxVal(maxValue);
                else
                    count <= count - 1;
            end
        end
    end
endmodule


module DriverBus#(
    parameter Bits = 2
)
(
    input [(Bits-1):0] in,
    input sel,
    output [(Bits-1):0] out
);
    assign out = (sel == 1'b1)? in : {Bits{1'bz}};
endmodule

module timer (
  input [15:0] dOut,
  input [15:0] Addr,
  input ioW,
  input ioR,
  input C,
  input InterLock,
  input [15:0] timerConfigAddr,
  input [15:0] timerTargetAddr,
  input [15:0] timerResetAddr,
  input [15:0] timerReadAddr,
  input rst,
  output [15:0] TimerOut,
  output \timer?nterrupt ,
  output TimerEn
);
  wire s0;
  wire s1;
  wire s2;
  wire timer_en;
  wire [6:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire [2:0] s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire [15:0] s16;
  wire [15:0] s17;
  wire [15:0] s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire [2:0] timerPrescaler;
  wire s25;
  wire TimerEn_temp;
  wire s26;
  wire s27;
  wire [15:0] s28;
  wire s29;
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i0 (
    .a( Addr ),
    .b( timerResetAddr ),
    .\= ( s0 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i1 (
    .a( Addr ),
    .b( timerTargetAddr ),
    .\= ( s13 )
  );
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i2 (
    .a( timerReadAddr ),
    .b( Addr ),
    .\= ( s26 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i3 (
    .a( Addr ),
    .b( timerConfigAddr ),
    .\= ( s29 )
  );
  assign s15 = ~ C;
  assign s1 = (dOut[0] & (s0 & ioW));
  assign s14 = (s13 & ioW);
  assign TimerEn_temp = (s26 & ioR);
  assign s27 = (s29 & ioW);
  // Reset
  DIG_JK_FF #(
    .Default(0)
  )
  DIG_JK_FF_i4 (
    .J( s1 ),
    .C( C ),
    .K( 1'b1 ),
    .Q( s2 )
  );
  // target
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i5 (
    .D( dOut ),
    .C( s15 ),
    .en( s14 ),
    .Q( s16 )
  );
  // Config
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i6 (
    .D( dOut ),
    .C( s15 ),
    .en( s27 ),
    .Q( s28 )
  );
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i7 (
    .a( s16 ),
    .b( 16'b0 ),
    .\> ( s20 ),
    .\= ( s21 )
  );
  assign timer_en = s28[0];
  assign timerPrescaler = s28[3:1];
  DIG_Counter_Nbit #(
    .Bits(7)
  )
  DIG_Counter_Nbit_i8 (
    .en( timer_en ),
    .C( C ),
    .clr( 1'b0 ),
    .out( s3 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i9 (
    .sel( s20 ),
    .in_0( 16'b0 ),
    .in_1( s16 ),
    .out( s17 )
  );
  assign s4 = s3[0];
  assign s5 = s3[1];
  assign s6 = s3[2];
  assign s7 = s3[3];
  assign s8 = s3[4];
  assign s9 = s3[5];
  assign s10 = s3[6];
  Mux_8x1 Mux_8x1_i10 (
    .sel( s11 ),
    .in_0( C ),
    .in_1( s4 ),
    .in_2( s5 ),
    .in_3( s6 ),
    .in_4( s7 ),
    .in_5( s8 ),
    .in_6( s9 ),
    .in_7( s10 ),
    .out( s12 )
  );
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i11 (
    .a( s17 ),
    .b( s18 ),
    .\= ( s19 )
  );
  assign \timer?nterrupt  = (~ InterLock & s28[5] & (~ s21 & s19));
  assign s22 = (~ s21 & ((s19 & s28[4]) | s2));
  DIG_CounterPreset #(
    .Bits(16),
    .maxValue(0)
  )
  DIG_CounterPreset_i12 (
    .en( timer_en ),
    .C( s23 ),
    .dir( 1'b0 ),
    .in( 16'b0 ),
    .ld( s24 ),
    .clr( 1'b0 ),
    .out( s18 )
  );
  Mux_2x1_NBits #(
    .Bits(3)
  )
  Mux_2x1_NBits_i13 (
    .sel( s22 ),
    .in_0( timerPrescaler ),
    .in_1( 3'b0 ),
    .out( s11 )
  );
  assign s25 = (InterLock | ((s19 & ~ s21) & ~ s22));
  DriverBus #(
    .Bits(16)
  )
  DriverBus_i14 (
    .in( s18 ),
    .sel( TimerEn_temp ),
    .out( TimerOut )
  );
  assign s24 = (s22 | rst);
  Mux_2x1 Mux_2x1_i15 (
    .sel( s25 ),
    .in_0( s12 ),
    .in_1( 1'b1 ),
    .out( s23 )
  );
  assign TimerEn = TimerEn_temp;
endmodule
module Register1
  (
    input D,
    input C,
    input en,
    input rst,
    output Q
  );

  reg  state = 'h0;

  assign Q = state;

  always @ (negedge C)
  begin

    if(rst)
    begin
      state <= 1'h0;
    end
    if (en)
      state <= D;

  end
endmodule


module register_1bit (
  input D,
  input C,
  input en,
  input rst,
  output Q
);
  // Register1
  Register1 Register1_i0 (
    .D( D ),
    .C( C ),
    .en( en ),
    .rst( rst ),
    .Q( Q )
  );
endmodule
module Register8
  (
    input [7:0]D,
    input C,
    input en,
    input rst,
    output [7:0]Q
  );

  reg [7:0] state = 'h0;

  assign Q = state;

  always @ (posedge C)
  begin
    if(rst)
    begin
      state <= 8'h0;
    end
    if (en)
      state <= D;


  end
endmodule


module register_8bit (
  input [7:0] D,
  input C,
  input en,
  input rst,
  output [7:0] Q
);
  // Register8
  Register8 Register8_i0 (
    .D( D ),
    .C( C ),
    .en( en ),
    .rst( rst ),
    .Q( Q )
  );
endmodule

module programCounter
  (
    input [15:0] AluIn,
    input clk,
    input rst,
    input absJmp,
    input intr,
    input reti,
    input relJmp,
    output [15:0] Nextpc,
    output [15:0] PC
  );
  reg[15:0] interuptFuncAdr = 16'h2;
  reg[15:0] interruptAdress = 16'b0000000000000000;

  reg[15:0] PCr = 16'b0000000000000000;
  reg [15:0] Nextpcr = 16'b0000000000000001;
  reg isStarted = 1'b0;
  assign Nextpc = Nextpcr;
  assign PC = PCr;




  always @( posedge clk)
  begin


    if(rst)
    begin
      PCr <= 16'b0000000000000000;
      Nextpcr<=  16'b0000000000000001;
    end
    else
    begin
      if(reti)
      begin
        PCr <= interruptAdress+1;
        Nextpcr <=interruptAdress+2;
      end
      else if(intr)
      begin
        if( relJmp || absJmp)
        begin
          interruptAdress <= PCr-1;
        end
        else
        begin
          interruptAdress <=PCr;
        end
        PCr <= interuptFuncAdr;
        Nextpcr <=interuptFuncAdr+1;
      end
      else if(relJmp)
      begin
        PCr <= PCr + AluIn+1;
        Nextpcr <=Nextpcr+AluIn+1;
      end
      else if(absJmp)
      begin
        PCr <=AluIn;
        Nextpcr<=AluIn+1;
      end
      else
      begin
        PCr <= PCr + 1;
        Nextpcr <= Nextpcr + 1;
      end
    end

  end




endmodule


module Demux4
#(
    parameter Default = 0 
)
(
    output out_0,
    output out_1,
    output out_2,
    output out_3,
    output out_4,
    output out_5,
    output out_6,
    output out_7,
    output out_8,
    output out_9,
    output out_10,
    output out_11,
    output out_12,
    output out_13,
    output out_14,
    output out_15,
    input [3:0] sel,
    input in
);
    assign out_0 = (sel == 4'h0)? in : Default;
    assign out_1 = (sel == 4'h1)? in : Default;
    assign out_2 = (sel == 4'h2)? in : Default;
    assign out_3 = (sel == 4'h3)? in : Default;
    assign out_4 = (sel == 4'h4)? in : Default;
    assign out_5 = (sel == 4'h5)? in : Default;
    assign out_6 = (sel == 4'h6)? in : Default;
    assign out_7 = (sel == 4'h7)? in : Default;
    assign out_8 = (sel == 4'h8)? in : Default;
    assign out_9 = (sel == 4'h9)? in : Default;
    assign out_10 = (sel == 4'ha)? in : Default;
    assign out_11 = (sel == 4'hb)? in : Default;
    assign out_12 = (sel == 4'hc)? in : Default;
    assign out_13 = (sel == 4'hd)? in : Default;
    assign out_14 = (sel == 4'he)? in : Default;
    assign out_15 = (sel == 4'hf)? in : Default;
endmodule

module Register16
  (
    input [15:0]D,
    input C,
    input en,
    input rst,
    output [15:0]Q
  );

  reg [15:0] state = 'h0;

  assign Q = state;

  always @ (posedge C)
  begin
    if(rst)
    begin
      state <= 16'h0;
    end
    if (en)
      state <= D;
  end
endmodule


module register_16bit (
  input [15:0] D,
  input C,
  input en,
  input rst,
  output [15:0] Q
);
  // Register16
  Register16 Register16_i0 (
    .D( D ),
    .C( C ),
    .en( en ),
    .rst( rst ),
    .Q( Q )
  );
endmodule

module Mux_16x1_NBits #(
    parameter Bits = 2
)
(
    input [3:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    input [(Bits - 1):0] in_8,
    input [(Bits - 1):0] in_9,
    input [(Bits - 1):0] in_10,
    input [(Bits - 1):0] in_11,
    input [(Bits - 1):0] in_12,
    input [(Bits - 1):0] in_13,
    input [(Bits - 1):0] in_14,
    input [(Bits - 1):0] in_15,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module RegisterBlock (
  input [15:0] DataIn,
  input WE,
  input clk,
  input [3:0] src,
  input [3:0] Dest,
  input rst,
  output [15:0] RDest,
  output [15:0] Rsrc
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire [15:0] s16;
  wire [15:0] s17;
  wire [15:0] s18;
  wire [15:0] s19;
  wire [15:0] s20;
  wire [15:0] s21;
  wire [15:0] s22;
  wire [15:0] s23;
  wire [15:0] s24;
  wire [15:0] s25;
  wire [15:0] s26;
  wire [15:0] s27;
  wire [15:0] s28;
  wire [15:0] s29;
  wire [15:0] s30;
  wire [15:0] s31;
  Demux4 #(
    .Default(0)
  )
  Demux4_i0 (
    .sel( Dest ),
    .in( WE ),
    .out_0( s0 ),
    .out_1( s1 ),
    .out_2( s2 ),
    .out_3( s3 ),
    .out_4( s4 ),
    .out_5( s5 ),
    .out_6( s6 ),
    .out_7( s7 ),
    .out_8( s8 ),
    .out_9( s9 ),
    .out_10( s10 ),
    .out_11( s11 ),
    .out_12( s12 ),
    .out_13( s13 ),
    .out_14( s14 ),
    .out_15( s15 )
  );
  // R0
  register_16bit register_16bit_i1 (
    .D( DataIn ),
    .C( clk ),
    .en( s0 ),
    .rst( rst ),
    .Q( s16 )
  );
  // R1
  register_16bit register_16bit_i2 (
    .D( DataIn ),
    .C( clk ),
    .en( s1 ),
    .rst( rst ),
    .Q( s17 )
  );
  // R2
  register_16bit register_16bit_i3 (
    .D( DataIn ),
    .C( clk ),
    .en( s2 ),
    .rst( rst ),
    .Q( s18 )
  );
  // R3
  register_16bit register_16bit_i4 (
    .D( DataIn ),
    .C( clk ),
    .en( s3 ),
    .rst( rst ),
    .Q( s19 )
  );
  // R4
  register_16bit register_16bit_i5 (
    .D( DataIn ),
    .C( clk ),
    .en( s4 ),
    .rst( rst ),
    .Q( s20 )
  );
  // R5
  register_16bit register_16bit_i6 (
    .D( DataIn ),
    .C( clk ),
    .en( s5 ),
    .rst( rst ),
    .Q( s21 )
  );
  // R6
  register_16bit register_16bit_i7 (
    .D( DataIn ),
    .C( clk ),
    .en( s6 ),
    .rst( rst ),
    .Q( s22 )
  );
  // R7
  register_16bit register_16bit_i8 (
    .D( DataIn ),
    .C( clk ),
    .en( s7 ),
    .rst( rst ),
    .Q( s23 )
  );
  // R8
  register_16bit register_16bit_i9 (
    .D( DataIn ),
    .C( clk ),
    .en( s8 ),
    .rst( rst ),
    .Q( s24 )
  );
  // R9
  register_16bit register_16bit_i10 (
    .D( DataIn ),
    .C( clk ),
    .en( s9 ),
    .rst( rst ),
    .Q( s25 )
  );
  // R10
  register_16bit register_16bit_i11 (
    .D( DataIn ),
    .C( clk ),
    .en( s10 ),
    .rst( rst ),
    .Q( s26 )
  );
  // R11
  register_16bit register_16bit_i12 (
    .D( DataIn ),
    .C( clk ),
    .en( s11 ),
    .rst( rst ),
    .Q( s27 )
  );
  // R12
  register_16bit register_16bit_i13 (
    .D( DataIn ),
    .C( clk ),
    .en( s12 ),
    .rst( rst ),
    .Q( s28 )
  );
  // BranchPointer
  register_16bit register_16bit_i14 (
    .D( DataIn ),
    .C( clk ),
    .en( s13 ),
    .rst( rst ),
    .Q( s29 )
  );
  // StackPointer
  register_16bit register_16bit_i15 (
    .D( DataIn ),
    .C( clk ),
    .en( s14 ),
    .rst( rst ),
    .Q( s30 )
  );
  // ReturnAddr
  register_16bit register_16bit_i16 (
    .D( DataIn ),
    .C( clk ),
    .en( s15 ),
    .rst( rst ),
    .Q( s31 )
  );
  Mux_16x1_NBits #(
    .Bits(16)
  )
  Mux_16x1_NBits_i17 (
    .sel( Dest ),
    .in_0( s16 ),
    .in_1( s17 ),
    .in_2( s18 ),
    .in_3( s19 ),
    .in_4( s20 ),
    .in_5( s21 ),
    .in_6( s22 ),
    .in_7( s23 ),
    .in_8( s24 ),
    .in_9( s25 ),
    .in_10( s26 ),
    .in_11( s27 ),
    .in_12( s28 ),
    .in_13( s29 ),
    .in_14( s30 ),
    .in_15( s31 ),
    .out( RDest )
  );
  Mux_16x1_NBits #(
    .Bits(16)
  )
  Mux_16x1_NBits_i18 (
    .sel( src ),
    .in_0( s16 ),
    .in_1( s17 ),
    .in_2( s18 ),
    .in_3( s19 ),
    .in_4( s20 ),
    .in_5( s21 ),
    .in_6( s22 ),
    .in_7( s23 ),
    .in_8( s24 ),
    .in_9( s25 ),
    .in_10( s26 ),
    .in_11( s27 ),
    .in_12( s28 ),
    .in_13( s29 ),
    .in_14( s30 ),
    .in_15( s31 ),
    .out( Rsrc )
  );
endmodule
module UART_Receiver (
    input wire clk,
    input wire rst,
    input wire rx,
    output reg [7:0] data_out,
    output reg rx_valid

  );

  parameter BAUD_RATE = 2;
  parameter CLK_FREQ = 10;  // 50 MHz clock
  parameter BIT_PERIOD = CLK_FREQ / BAUD_RATE;

  reg [15:0] sample_count=0;
  reg [3:0] bit_count=0;
  reg [7:0] rx_shift_reg=0;
  reg receiving=0;
  reg rx_d1=0, rx_d2=0;
  reg didStarted=0;

  assign sample_countdeb = sample_count;
  assign bit_countdeb = bit_count;
  assign rx_shift_regdeb = rx_shift_reg;
  assign receivingdeb = receiving;
  assign rx_d2deb = rx_d2;


  always @(posedge clk or posedge rst)
  begin
    if (rst==1)
    begin
      sample_count <= 0;
      bit_count <= 0;
      rx_shift_reg <= 0;
      receiving <= 0;
      rx_valid <= 0;
      rx_d2 <= 1;
      didStarted<=0;
    end
    else
    begin
      rx_d2 <= rx;
      if(rx_valid)
      begin
        rx_valid <= 0;
        didStarted<=0;
      end


      if(didStarted)

      begin
        if (!receiving)
        begin
          if (rx_d2 == 0)
          begin  // Detect start bit
            receiving <= 1;
            sample_count <= BIT_PERIOD / 2;  // Start sampling in the middle of the bit period
            bit_count <= 0;
          end
        end
        else
        begin
          if (sample_count == BIT_PERIOD - 1)
          begin
            sample_count <= 0;
            bit_count <= bit_count + 1;

            if (bit_count == 0)
            begin
              // Ignore the start bit
            end
            else if (bit_count < 9)
            begin
              // Receive data bits
              rx_shift_reg <= {rx_d2, rx_shift_reg[7:1]};
            end
            else
            begin
              // Stop bit, end of reception
              receiving <= 0;
              bit_count <= 0;
              data_out <= rx_shift_reg;
              rx_valid <= 1;
            end
          end
          else
          begin
            sample_count <= sample_count + 1;
          end
        end
      end

      else
        if(rx)
          didStarted<=1;

    end
  end

endmodule

module Fifo8
  (input  clk,
   input  [7:0] data,
   input  rst,
   input  writeEn,
   input  readEn,
   output FIFOEmpty,
   output FIFOFull,
   output [4:0] FIFOCount,
   output [7:0] readData);
  wire [135:0] fifobuffer;
  reg [4:0] fifocounter;
  reg isempty;
  reg isfull;
  wire [127:0] n26_o;
  wire [127:0] n27_o;
  wire [127:0] n28_o;
  wire [4:0] n30_o;
  wire n32_o;
  wire n34_o;
  wire n36_o;
  wire n37_o;
  wire [4:0] n40_o;
  wire [7:0] n42_o;
  wire [135:0] n43_o;
  wire [4:0] n46_o;
  wire n48_o;
  wire n50_o;
  wire [7:0] n51_o;
  wire [135:0] n52_o;
  wire [4:0] n54_o;
  wire n56_o;
  wire n57_o;
  wire n59_o;
  wire n60_o;
  wire [7:0] n61_o;
  wire [7:0] n62_o;
  wire [7:0] n63_o;
  wire [7:0] n64_o;
  wire [7:0] n65_o;
  wire [7:0] n66_o;
  wire [7:0] n67_o;
  wire [7:0] n68_o;
  wire [7:0] n69_o;
  wire [7:0] n70_o;
  wire [7:0] n71_o;
  wire [7:0] n72_o;
  wire [7:0] n73_o;
  wire [7:0] n74_o;
  wire [7:0] n75_o;
  wire [7:0] n76_o;
  wire [7:0] n77_o;
  wire [4:0] n79_o;
  wire n81_o;
  wire n83_o;
  wire [127:0] n85_o;
  wire [127:0] n86_o;
  wire [127:0] n87_o;
  wire [127:0] n88_o;
  wire [127:0] n89_o;
  wire [7:0] n90_o;
  wire [7:0] n91_o;
  wire [7:0] n92_o;
  wire [4:0] n93_o;
  wire n94_o;
  wire n96_o;
  wire [135:0] n98_o;
  reg [135:0] n104_q;
  reg [4:0] n105_q;
  reg n106_q;
  reg n107_q;
  wire [7:0] n108_o;
  reg [7:0] n109_q;
  wire n110_o;
  wire n111_o;
  wire n112_o;
  wire n113_o;
  wire n114_o;
  wire n115_o;
  wire n116_o;
  wire n117_o;
  wire n118_o;
  wire n119_o;
  wire n120_o;
  wire n121_o;
  wire n122_o;
  wire n123_o;
  wire n124_o;
  wire n125_o;
  wire n126_o;
  wire n127_o;
  wire n128_o;
  wire n129_o;
  wire n130_o;
  wire n131_o;
  wire n132_o;
  wire n133_o;
  wire n134_o;
  wire n135_o;
  wire n136_o;
  wire n137_o;
  wire n138_o;
  wire n139_o;
  wire n140_o;
  wire n141_o;
  wire n142_o;
  wire n143_o;
  wire n144_o;
  wire n145_o;
  wire n146_o;
  wire n147_o;
  wire n148_o;
  wire n149_o;
  wire n150_o;
  wire n151_o;
  wire n152_o;
  wire n153_o;
  wire [7:0] n154_o;
  wire [7:0] n155_o;
  wire [7:0] n156_o;
  wire [7:0] n157_o;
  wire [7:0] n158_o;
  wire [7:0] n159_o;
  wire [7:0] n160_o;
  wire [7:0] n161_o;
  wire [7:0] n162_o;
  wire [7:0] n163_o;
  wire [7:0] n164_o;
  wire [7:0] n165_o;
  wire [7:0] n166_o;
  wire [7:0] n167_o;
  wire [7:0] n168_o;
  wire [7:0] n169_o;
  wire [7:0] n170_o;
  wire [7:0] n171_o;
  wire [7:0] n172_o;
  wire [7:0] n173_o;
  wire [7:0] n174_o;
  wire [7:0] n175_o;
  wire [7:0] n176_o;
  wire [7:0] n177_o;
  wire [7:0] n178_o;
  wire [7:0] n179_o;
  wire [7:0] n180_o;
  wire [7:0] n181_o;
  wire [7:0] n182_o;
  wire [7:0] n183_o;
  wire [7:0] n184_o;
  wire [7:0] n185_o;
  wire [7:0] n186_o;
  wire [7:0] n187_o;
  wire [135:0] n188_o;
  assign FIFOEmpty = isempty;
  assign FIFOFull = isfull;
  assign FIFOCount = fifocounter;
  assign readData = n109_q;
  /* fifo.vhdl:30:10  */
  assign fifobuffer = n104_q; // (signal)
  /* fifo.vhdl:32:10  */
  always @*
    fifocounter = n105_q; // (isignal)
  initial
    fifocounter = 5'b00000;
  /* fifo.vhdl:34:10  */
  always @*
    isempty = n106_q; // (isignal)
  initial
    isempty = 1'b1;
  /* fifo.vhdl:35:10  */
  always @*
    isfull = n107_q; // (isignal)
  initial
    isfull = 1'b0;
  assign n26_o = {8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000, 8'b00000000};
  assign n27_o = fifobuffer[135:8];
  /* fifo.vhdl:46:7  */
  assign n28_o = rst ? n26_o : n27_o;
  /* fifo.vhdl:46:7  */
  assign n30_o = rst ? 5'b00000 : fifocounter;
  /* fifo.vhdl:46:7  */
  assign n32_o = rst ? 1'b1 : isempty;
  /* fifo.vhdl:46:7  */
  assign n34_o = rst ? 1'b0 : isfull;
  /* fifo.vhdl:57:44  */
  assign n36_o = fifocounter != 5'b10000;
  /* fifo.vhdl:57:27  */
  assign n37_o = writeEn & n36_o;
  /* fifo.vhdl:59:20  */
  assign n40_o = 5'b10000 - fifocounter;
  assign n42_o = fifobuffer[7:0];
  assign n43_o = {n28_o, n42_o};
  /* fifo.vhdl:61:36  */
  assign n46_o = fifocounter + 5'b00001;
  /* fifo.vhdl:64:25  */
  assign n48_o = fifocounter == 5'b01111;
  /* fifo.vhdl:57:7  */
  assign n50_o = n57_o ? 1'b1 : n34_o;
  assign n51_o = fifobuffer[7:0];
  assign n52_o = {n28_o, n51_o};
  /* fifo.vhdl:57:7  */
  assign n54_o = n37_o ? n46_o : n30_o;
  /* fifo.vhdl:57:7  */
  assign n56_o = n37_o ? 1'b0 : n32_o;
  /* fifo.vhdl:57:7  */
  assign n57_o = n37_o & n48_o;
  /* fifo.vhdl:69:43  */
  assign n59_o = $unsigned(fifocounter) > $unsigned(5'b00000);
  /* fifo.vhdl:69:26  */
  assign n60_o = readEn & n59_o;
  /* fifo.vhdl:71:31  */
  assign n61_o = fifobuffer[135:128];
  /* fifo.vhdl:75:38  */
  assign n62_o = fifobuffer[127:120];
  /* fifo.vhdl:75:38  */
  assign n63_o = fifobuffer[119:112];
  /* fifo.vhdl:75:38  */
  assign n64_o = fifobuffer[111:104];
  /* fifo.vhdl:75:38  */
  assign n65_o = fifobuffer[103:96];
  /* fifo.vhdl:75:38  */
  assign n66_o = fifobuffer[95:88];
  /* fifo.vhdl:75:38  */
  assign n67_o = fifobuffer[87:80];
  /* fifo.vhdl:75:38  */
  assign n68_o = fifobuffer[79:72];
  /* fifo.vhdl:75:38  */
  assign n69_o = fifobuffer[71:64];
  /* fifo.vhdl:75:38  */
  assign n70_o = fifobuffer[63:56];
  /* fifo.vhdl:75:38  */
  assign n71_o = fifobuffer[55:48];
  /* fifo.vhdl:75:38  */
  assign n72_o = fifobuffer[47:40];
  /* fifo.vhdl:75:38  */
  assign n73_o = fifobuffer[39:32];
  /* fifo.vhdl:75:38  */
  assign n74_o = fifobuffer[31:24];
  /* fifo.vhdl:75:38  */
  assign n75_o = fifobuffer[23:16];
  /* fifo.vhdl:75:38  */
  assign n76_o = fifobuffer[15:8];
  /* fifo.vhdl:75:38  */
  assign n77_o = fifobuffer[7:0];
  /* fifo.vhdl:78:36  */
  assign n79_o = fifocounter - 5'b00001;
  /* fifo.vhdl:79:25  */
  assign n81_o = fifocounter == 5'b00001;
  /* fifo.vhdl:69:7  */
  assign n83_o = n94_o ? 1'b1 : n56_o;
  assign n85_o = {n62_o, n63_o, n64_o, n65_o, n66_o, n67_o, n68_o, n69_o, n70_o, n71_o, n72_o, n73_o, n74_o, n75_o, n76_o, n77_o};
  assign n86_o = n188_o[135:8];
  assign n87_o = n52_o[135:8];
  /* fifo.vhdl:57:7  */
  assign n88_o = n37_o ? n86_o : n87_o;
  /* fifo.vhdl:69:7  */
  assign n89_o = n60_o ? n85_o : n88_o;
  assign n90_o = n188_o[7:0];
  assign n91_o = n52_o[7:0];
  /* fifo.vhdl:57:7  */
  assign n92_o = n37_o ? n90_o : n91_o;
  /* fifo.vhdl:69:7  */
  assign n93_o = n60_o ? n79_o : n54_o;
  /* fifo.vhdl:69:7  */
  assign n94_o = n60_o & n81_o;
  /* fifo.vhdl:69:7  */
  assign n96_o = n60_o ? 1'b0 : n50_o;
  assign n98_o = {n89_o, n92_o};
  /* fifo.vhdl:45:5  */
  always @(posedge clk)
    n104_q <= n98_o;
  /* fifo.vhdl:45:5  */
  always @(posedge clk)
    n105_q <= n93_o;
  initial
    n105_q = 5'b00000;
  /* fifo.vhdl:45:5  */
  always @(posedge clk)
    n106_q <= n83_o;
  initial
    n106_q = 1'b1;
  /* fifo.vhdl:45:5  */
  always @(posedge clk)
    n107_q <= n96_o;
  initial
    n107_q = 1'b0;
  /* fifo.vhdl:45:5  */
  assign n108_o = n60_o ? n61_o : n109_q;
  /* fifo.vhdl:45:5  */
  always @(posedge clk)
    n109_q <= n108_o;
  /* fifo.vhdl:59:9  */
  assign n110_o = n40_o[4];
  /* fifo.vhdl:59:9  */
  assign n111_o = ~n110_o;
  /* fifo.vhdl:59:9  */
  assign n112_o = n40_o[3];
  /* fifo.vhdl:59:9  */
  assign n113_o = ~n112_o;
  /* fifo.vhdl:59:9  */
  assign n114_o = n111_o & n113_o;
  /* fifo.vhdl:59:9  */
  assign n115_o = n111_o & n112_o;
  /* fifo.vhdl:59:9  */
  assign n116_o = n110_o & n113_o;
  /* fifo.vhdl:59:9  */
  assign n117_o = n40_o[2];
  /* fifo.vhdl:59:9  */
  assign n118_o = ~n117_o;
  /* fifo.vhdl:59:9  */
  assign n119_o = n114_o & n118_o;
  /* fifo.vhdl:59:9  */
  assign n120_o = n114_o & n117_o;
  /* fifo.vhdl:59:9  */
  assign n121_o = n115_o & n118_o;
  /* fifo.vhdl:59:9  */
  assign n122_o = n115_o & n117_o;
  /* fifo.vhdl:59:9  */
  assign n123_o = n116_o & n118_o;
  /* fifo.vhdl:59:9  */
  assign n124_o = n40_o[1];
  /* fifo.vhdl:59:9  */
  assign n125_o = ~n124_o;
  /* fifo.vhdl:59:9  */
  assign n126_o = n119_o & n125_o;
  /* fifo.vhdl:59:9  */
  assign n127_o = n119_o & n124_o;
  /* fifo.vhdl:59:9  */
  assign n128_o = n120_o & n125_o;
  /* fifo.vhdl:59:9  */
  assign n129_o = n120_o & n124_o;
  /* fifo.vhdl:59:9  */
  assign n130_o = n121_o & n125_o;
  /* fifo.vhdl:59:9  */
  assign n131_o = n121_o & n124_o;
  /* fifo.vhdl:59:9  */
  assign n132_o = n122_o & n125_o;
  /* fifo.vhdl:59:9  */
  assign n133_o = n122_o & n124_o;
  /* fifo.vhdl:59:9  */
  assign n134_o = n123_o & n125_o;
  /* fifo.vhdl:59:9  */
  assign n135_o = n40_o[0];
  /* fifo.vhdl:59:9  */
  assign n136_o = ~n135_o;
  /* fifo.vhdl:59:9  */
  assign n137_o = n126_o & n136_o;
  /* fifo.vhdl:59:9  */
  assign n138_o = n126_o & n135_o;
  /* fifo.vhdl:59:9  */
  assign n139_o = n127_o & n136_o;
  /* fifo.vhdl:59:9  */
  assign n140_o = n127_o & n135_o;
  /* fifo.vhdl:59:9  */
  assign n141_o = n128_o & n136_o;
  /* fifo.vhdl:59:9  */
  assign n142_o = n128_o & n135_o;
  /* fifo.vhdl:59:9  */
  assign n143_o = n129_o & n136_o;
  /* fifo.vhdl:59:9  */
  assign n144_o = n129_o & n135_o;
  /* fifo.vhdl:59:9  */
  assign n145_o = n130_o & n136_o;
  /* fifo.vhdl:59:9  */
  assign n146_o = n130_o & n135_o;
  /* fifo.vhdl:59:9  */
  assign n147_o = n131_o & n136_o;
  /* fifo.vhdl:59:9  */
  assign n148_o = n131_o & n135_o;
  /* fifo.vhdl:59:9  */
  assign n149_o = n132_o & n136_o;
  /* fifo.vhdl:59:9  */
  assign n150_o = n132_o & n135_o;
  /* fifo.vhdl:59:9  */
  assign n151_o = n133_o & n136_o;
  /* fifo.vhdl:59:9  */
  assign n152_o = n133_o & n135_o;
  /* fifo.vhdl:59:9  */
  assign n153_o = n134_o & n136_o;
  assign n154_o = n43_o[7:0];
  /* fifo.vhdl:59:9  */
  assign n155_o = n137_o ? data : n154_o;
  assign n156_o = n43_o[15:8];
  /* fifo.vhdl:59:9  */
  assign n157_o = n138_o ? data : n156_o;
  assign n158_o = n43_o[23:16];
  /* fifo.vhdl:59:9  */
  assign n159_o = n139_o ? data : n158_o;
  assign n160_o = n43_o[31:24];
  /* fifo.vhdl:59:9  */
  assign n161_o = n140_o ? data : n160_o;
  assign n162_o = n43_o[39:32];
  /* fifo.vhdl:59:9  */
  assign n163_o = n141_o ? data : n162_o;
  assign n164_o = n43_o[47:40];
  /* fifo.vhdl:59:9  */
  assign n165_o = n142_o ? data : n164_o;
  assign n166_o = n43_o[55:48];
  /* fifo.vhdl:59:9  */
  assign n167_o = n143_o ? data : n166_o;
  assign n168_o = n43_o[63:56];
  /* fifo.vhdl:59:9  */
  assign n169_o = n144_o ? data : n168_o;
  assign n170_o = n43_o[71:64];
  /* fifo.vhdl:59:9  */
  assign n171_o = n145_o ? data : n170_o;
  assign n172_o = n43_o[79:72];
  /* fifo.vhdl:59:9  */
  assign n173_o = n146_o ? data : n172_o;
  assign n174_o = n43_o[87:80];
  /* fifo.vhdl:59:9  */
  assign n175_o = n147_o ? data : n174_o;
  assign n176_o = n43_o[95:88];
  /* fifo.vhdl:59:9  */
  assign n177_o = n148_o ? data : n176_o;
  assign n178_o = n43_o[103:96];
  /* fifo.vhdl:59:9  */
  assign n179_o = n149_o ? data : n178_o;
  assign n180_o = n43_o[111:104];
  /* fifo.vhdl:59:9  */
  assign n181_o = n150_o ? data : n180_o;
  assign n182_o = n43_o[119:112];
  /* fifo.vhdl:59:9  */
  assign n183_o = n151_o ? data : n182_o;
  assign n184_o = n43_o[127:120];
  /* fifo.vhdl:59:9  */
  assign n185_o = n152_o ? data : n184_o;
  assign n186_o = n43_o[135:128];
  /* fifo.vhdl:59:9  */
  assign n187_o = n153_o ? data : n186_o;
  assign n188_o = {n187_o, n185_o, n183_o, n181_o, n179_o, n177_o, n175_o, n173_o, n171_o, n169_o, n167_o, n165_o, n163_o, n161_o, n159_o, n157_o, n155_o};
endmodule



module FIFO (
  input [7:0] datain,
  input wr,
  input clk,
  input rst,
  input rd,
  output [7:0] dataOut,
  output [4:0] Count,
  output Full,
  output Empty
);
  // Fifo8
  Fifo8 Fifo8_i0 (
    .clk( clk ),
    .data( datain ),
    .rst( rst ),
    .writeEn( wr ),
    .readEn( rd ),
    .FIFOEmpty( Empty ),
    .FIFOFull( Full ),
    .FIFOCount( Count ),
    .readData( dataOut )
  );
endmodule
module UART_Transmitter (
    input wire clk,
    input wire rst,
    input wire [7:0] data,
    input wire start,
    output reg tx=1,
    output reg tx_busy=0


  );

  parameter CLK_FREQ = 50000;  // System clock frequency
  parameter BAUD_RATE = 9600;  // Desired baud rate
  parameter BIT_PERIOD = 5;  // Clock cycles per bit period

  reg [9:0] shift_reg=0;
  reg [3:0] bit_count=0;
  reg [15:0] baud_counter=0;
  reg transmitting=0;
  always @(posedge clk or posedge rst)
  begin
    if (rst==1)
    begin
      tx <= 1'b1;  // Line idle state
      tx_busy <= 0;
      transmitting <= 0;
      shift_reg <= 8'b0;
      bit_count <= 0;
      baud_counter <= 0;
    end
    else
    begin

      if ( start && !tx_busy)
      begin
        tx_busy <= 1;
        transmitting <= 1;
        shift_reg <= {1'b1, data, 1'b0};  // Start bit, data, stop bit
        bit_count <= 0;
        baud_counter <= 0;
      end

      if (transmitting)
      begin
        if (baud_counter == BIT_PERIOD - 1)
        begin
          baud_counter <= 0;
          tx <= shift_reg[0];
          shift_reg <= {1'b1, shift_reg[9:1]};  // Shift right with stop bit
          bit_count <= bit_count + 1;

          if (bit_count == 9)
          begin  // 1 start bit + 8 data bits + 1 stop bit = 10 bits total
            transmitting <= 0;
            tx_busy <= 0;
          end
        end
        else
        begin
          baud_counter <= baud_counter + 1;
        end
      end
    end
  end

endmodule


module uartBlock (
  input RX,
  input rst,
  input [15:0] dataIn,
  input [15:0] Addr,
  input ioW,
  input ioR,
  input clk,
  input localclk,
  input [15:0] transmitAddr,
  input [15:0] ReceiveAddr,
  output TX,
  output [15:0] DataOut
);
  wire [7:0] s0;
  wire s1;
  wire s2;
  wire [7:0] s3;
  wire s4;
  wire [7:0] FifoIn;
  wire s5;
  wire s6;
  wire [4:0] s7;
  wire s8;
  wire s9;
  wire s10;
  wire [7:0] FifoOut;
  wire s11;
  wire [4:0] s12;
  wire s13;
  wire s14;
  wire s15;
  // UART_Receiver
  UART_Receiver UART_Receiver_i0 (
    .clk( clk ),
    .rst( rst ),
    .rx( RX ),
    .data_out( s3 ),
    .rx_valid( s4 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i1 (
    .a( Addr ),
    .b( transmitAddr ),
    .\= ( s9 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i2 (
    .a( Addr ),
    .b( ReceiveAddr ),
    .\= ( s15 )
  );
  assign FifoIn = dataIn[7:0];
  assign s5 = (s9 & ioW);
  assign s11 = (s15 & ioR);
  FIFO FIFO_i3 (
    .datain( s3 ),
    .wr( s4 ),
    .clk( clk ),
    .rst( rst ),
    .rd( s11 ),
    .dataOut( FifoOut ),
    .Count( s12 ),
    .Full( s13 ),
    .Empty( s14 )
  );
  assign DataOut[7:0] = FifoOut;
  assign DataOut[15:8] = 8'b0;
  // UART_Transmitter
  UART_Transmitter UART_Transmitter_i4 (
    .clk( localclk ),
    .rst( rst ),
    .data( s0 ),
    .start( s1 ),
    .tx( TX ),
    .tx_busy( s2 )
  );
  FIFO FIFO_i5 (
    .datain( FifoIn ),
    .wr( s5 ),
    .clk( s6 ),
    .rst( rst ),
    .rd( s1 ),
    .dataOut( s0 ),
    .Count( s7 ),
    .Empty( s8 )
  );
  assign s1 = (s10 & (~ s8 & ~ s5) & ~ s2);
  assign s6 = (s1 | (clk & s5));
  CompSigned #(
    .Bits(5)
  )
  CompSigned_i6 (
    .a( s7 ),
    .b( 5'b0 ),
    .\> ( s10 )
  );
endmodule
module ClockCont
  (
    input Clk,
    input Enable,
    input rst,
    output instRead,
    output instFetch,
    output instDecode,
    output instExecute
  );

  reg[3:0]  Counter = 'h0;
  reg instReadReg = 1'b1;
  assign instRead = instReadReg;
  assign instFetch = (Counter == 5'h2);
  assign instDecode = (Counter == 5'h4);
  assign instExecute = (Counter == 5'h5);


  always @ (posedge Clk)
  begin
    if(rst)
    begin
      Counter <= 5'h0;
    end
    if ( Enable=='h0)
      Counter <= Counter + 1;

    instReadReg<=Counter == 5'h0 | Counter == 5'h1;

  end
endmodule


module Driver
(
    input in,
    input sel,
    output out
);
    assign out = (sel == 1'b1)? in : 1'bz;
endmodule
module DIG_ROM_65536X16_pgr (
    input [15:0] A,
    input sel,
    output reg [15:0] D
);
    reg [15:0] my_rom [0:12];

    always @ (*) begin
        if (~sel)
            D = 16'hz;
        else if (A > 16'hc)
            D = 16'h0;
        else
            D = my_rom[A];
    end

    initial begin
        my_rom[0] = 16'h8004;
        my_rom[1] = 16'h5000;
        my_rom[2] = 16'h0;
        my_rom[3] = 16'h4400;
        my_rom[4] = 16'ha00;
        my_rom[5] = 16'h3fb0;
        my_rom[6] = 16'ha01;
        my_rom[7] = 16'h3fa0;
        my_rom[8] = 16'h3d00;
        my_rom[9] = 16'h3dff;
        my_rom[10] = 16'h3fb3;
        my_rom[11] = 16'h3fb2;
        my_rom[12] = 16'h3dfd;
    end
endmodule


module Demux1
#(
    parameter Default = 0 
)
(
    output out_0,
    output out_1,
    input [0:0] sel,
    input in
);
    assign out_0 = (sel == 1'h0)? in : Default;
    assign out_1 = (sel == 1'h1)? in : Default;
endmodule


module Mux_4x1
(
    input [1:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    output reg out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


// Register for storing large constants.
// There is a 1-bit command describing this register. 
// In this way, 15 bits can be stored (the 16th bit 
// activates the writing of this register and therefore 
// is always one). The 16th bit will be set according 
// to the 'immediate extend mode' (iem).
module ImReg (
  input en, // enables storage
  input [1:0] iem, // immediate extend mode (0: sign extend; 1: extend with 0, 2:extend with S0, 3:extend with D0)
  input C,
  input [15:0] inst, // the current instruction
  output [15:0] imm // The constant of register contents and bit 8.

);
  wire [14:0] s0;
  wire [14:0] s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  assign s2 = inst[0];
  assign s3 = inst[4];
  assign s0 = inst[14:0];
  // imm
  DIG_Register_BUS #(
    .Bits(15)
  )
  DIG_Register_BUS_i0 (
    .D( s0 ),
    .C( C ),
    .en( en ),
    .Q( s1 )
  );
  assign s5 = s1[14];
  Mux_4x1 Mux_4x1_i1 (
    .sel( iem ),
    .in_0( s5 ),
    .in_1( 1'b0 ),
    .in_2( s2 ),
    .in_3( s3 ),
    .out( s4 )
  );
  assign imm[14:0] = s1;
  assign imm[15] = s4;
endmodule

module DIG_Register
(
    input C,
    input en,
    input D,
    output Q
);

    reg  state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module \1_addressable_register  (
  input [15:0] Datain,
  input ioW,
  input [15:0] addrIn,
  input [15:0] address,
  input clk,
  output DataOut
);
  wire s_DataIn;
  wire s0;
  wire s1;
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i0 (
    .a( addrIn ),
    .b( address ),
    .\= ( s1 )
  );
  assign s_DataIn = Datain[0];
  assign s0 = (s1 & ioW);
  // addrReg
  DIG_Register DIG_Register_i1 (
    .D( s_DataIn ),
    .C( clk ),
    .en( s0 ),
    .Q( DataOut )
  );
endmodule

module DemuxBus1
#(
    parameter Bits = 2,
    parameter Default = 0 
)
(
    output [(Bits-1):0] out_0,
    output [(Bits-1):0] out_1,
    input [0:0] sel,
    input [(Bits-1):0] in
);
    assign out_0 = (sel == 1'h0)? in : Default;
    assign out_1 = (sel == 1'h1)? in : Default;
endmodule


module lfsr_RandomNumberGen (
  input [15:0] adrrIn,
  input [15:0] dataIn,
  input ioW,
  input clk,
  input [15:0] SeedAdr,
  output [15:0] Out
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire [15:0] s5;
  wire [15:0] s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire s31;
  wire s32;
  wire s33;
  wire s34;
  wire s35;
  wire s36;
  wire s37;
  wire s38;
  wire s39;
  wire s40;
  wire s41;
  wire s42;
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i0 (
    .a( adrrIn ),
    .b( SeedAdr ),
    .\= ( s7 )
  );
  assign s4 = (s7 & ioW);
  // seed
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i1 (
    .D( dataIn ),
    .C( clk ),
    .en( s4 ),
    .Q( s5 )
  );
  assign s1 = (clk & s4);
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i2 (
    .sel( s4 ),
    .in_0( 16'b0 ),
    .in_1( s5 ),
    .out( s6 )
  );
  assign s15 = s6[2];
  assign s13 = s6[1];
  assign s10 = s6[0];
  assign s17 = s6[3];
  assign s19 = s6[4];
  assign s21 = s6[5];
  assign s23 = s6[6];
  assign s25 = s6[7];
  assign s27 = s6[8];
  assign s29 = s6[9];
  assign s31 = s6[10];
  assign s33 = s6[11];
  assign s35 = s6[12];
  assign s37 = s6[13];
  assign s39 = s6[14];
  assign s41 = s6[15];
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i3 (
    .Set( 1'b0 ),
    .D( s0 ),
    .C( s1 ),
    .Clr( s2 ),
    .Q( s3 ),
    .\~Q ( s0 )
  );
  assign s9 = (s4 & ~ s8);
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i4 (
    .Set( s10 ),
    .D( s11 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s12 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i5 (
    .Set( s13 ),
    .D( s12 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s14 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i6 (
    .Set( s15 ),
    .D( s14 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s16 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i7 (
    .Set( s17 ),
    .D( s16 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s18 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i8 (
    .Set( s19 ),
    .D( s18 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s20 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i9 (
    .Set( s21 ),
    .D( s20 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s22 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i10 (
    .Set( s23 ),
    .D( s22 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s24 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i11 (
    .Set( s25 ),
    .D( s24 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s26 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i12 (
    .Set( s27 ),
    .D( s26 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s28 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i13 (
    .Set( s29 ),
    .D( s28 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s30 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i14 (
    .Set( s31 ),
    .D( s30 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s32 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i15 (
    .Set( s33 ),
    .D( s32 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s34 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i16 (
    .Set( s35 ),
    .D( s34 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s36 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i17 (
    .Set( s37 ),
    .D( s36 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s38 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i18 (
    .Set( s39 ),
    .D( s38 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s40 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i19 (
    .Set( s41 ),
    .D( s40 ),
    .C( clk ),
    .Clr( s9 ),
    .Q( s42 )
  );
  assign s11 = (((s38 ^ s42) ^ s36) ^ s32);
  assign Out[0] = s12;
  assign Out[1] = s14;
  assign Out[2] = s16;
  assign Out[3] = s18;
  assign Out[4] = s20;
  assign Out[5] = s22;
  assign Out[6] = s24;
  assign Out[7] = s26;
  assign Out[8] = s28;
  assign Out[9] = s30;
  assign Out[10] = s32;
  assign Out[11] = s34;
  assign Out[12] = s36;
  assign Out[13] = s38;
  assign Out[14] = s40;
  assign Out[15] = s42;
  assign s8 = (s3 | s2);
  DIG_JK_FF #(
    .Default(0)
  )
  DIG_JK_FF_i20 (
    .J( s8 ),
    .C( clk ),
    .K( s8 ),
    .Q( s2 )
  );
endmodule

module DIG_Neg #(
    parameter Bits = 1
)
(
      input signed [(Bits-1):0] in,
      output signed [(Bits-1):0] out
);
    assign out = -in;
endmodule


module DIG_Mul_unsigned #(
    parameter Bits = 1
)
(
    
      input [(Bits-1):0] a,
      input [(Bits-1):0] b,
      output [(Bits*2-1):0] mul
    
);
    assign mul = a * b;
endmodule


module sub_multplex (
  input a,
  input b,
  input bi,
  input os,
  output bo,
  output d
);
  wire s0;
  DIG_Sub #(
    .Bits(1)
  )
  DIG_Sub_i0 (
    .a( a ),
    .b( b ),
    .c_i( bi ),
    .s( s0 ),
    .c_o( bo )
  );
  assign d = ((a & os) | (s0 & ~ os));
endmodule

module divs (
  input [15:0] Bolen,
  input [15:0] bolunen,
  output [15:0] bolum,
  output [15:0] Kalan
);
  wire a1;
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire a2;
  wire s4;
  wire s5;
  wire a3;
  wire s6;
  wire s7;
  wire a4;
  wire s8;
  wire s9;
  wire a5;
  wire s10;
  wire s11;
  wire a6;
  wire s12;
  wire s13;
  wire a7;
  wire s14;
  wire s15;
  wire a8;
  wire s16;
  wire s17;
  wire a9;
  wire s18;
  wire s19;
  wire a10;
  wire s20;
  wire s21;
  wire a11;
  wire s22;
  wire s23;
  wire a12;
  wire s24;
  wire s25;
  wire a13;
  wire s26;
  wire s27;
  wire a14;
  wire s28;
  wire s29;
  wire a15;
  wire s30;
  wire s31;
  wire b16;
  wire a16;
  wire s32;
  wire s33;
  wire s34;
  wire s35;
  wire s36;
  wire s37;
  wire s38;
  wire s39;
  wire s40;
  wire s41;
  wire s42;
  wire s43;
  wire s44;
  wire s45;
  wire s46;
  wire s47;
  wire s48;
  wire s49;
  wire s50;
  wire s51;
  wire s52;
  wire s53;
  wire s54;
  wire s55;
  wire s56;
  wire s57;
  wire s58;
  wire s59;
  wire s60;
  wire s61;
  wire s62;
  wire s63;
  wire s64;
  wire b15;
  wire s65;
  wire s66;
  wire s67;
  wire s68;
  wire s69;
  wire s70;
  wire s71;
  wire s72;
  wire s73;
  wire s74;
  wire s75;
  wire s76;
  wire s77;
  wire s78;
  wire s79;
  wire s80;
  wire s81;
  wire s82;
  wire s83;
  wire s84;
  wire s85;
  wire s86;
  wire s87;
  wire s88;
  wire s89;
  wire s90;
  wire s91;
  wire s92;
  wire s93;
  wire s94;
  wire s95;
  wire s96;
  wire s97;
  wire b14;
  wire s98;
  wire s99;
  wire s100;
  wire s101;
  wire s102;
  wire s103;
  wire s104;
  wire s105;
  wire s106;
  wire s107;
  wire s108;
  wire s109;
  wire s110;
  wire s111;
  wire s112;
  wire s113;
  wire s114;
  wire s115;
  wire s116;
  wire s117;
  wire s118;
  wire s119;
  wire s120;
  wire s121;
  wire s122;
  wire s123;
  wire s124;
  wire s125;
  wire s126;
  wire s127;
  wire s128;
  wire s129;
  wire s130;
  wire b13;
  wire s131;
  wire s132;
  wire s133;
  wire s134;
  wire s135;
  wire s136;
  wire s137;
  wire s138;
  wire s139;
  wire s140;
  wire s141;
  wire s142;
  wire s143;
  wire s144;
  wire s145;
  wire s146;
  wire s147;
  wire s148;
  wire s149;
  wire s150;
  wire s151;
  wire s152;
  wire s153;
  wire s154;
  wire s155;
  wire s156;
  wire s157;
  wire s158;
  wire s159;
  wire s160;
  wire s161;
  wire s162;
  wire s163;
  wire b12;
  wire s164;
  wire s165;
  wire s166;
  wire s167;
  wire s168;
  wire s169;
  wire s170;
  wire s171;
  wire s172;
  wire s173;
  wire s174;
  wire s175;
  wire s176;
  wire s177;
  wire s178;
  wire s179;
  wire s180;
  wire s181;
  wire s182;
  wire s183;
  wire s184;
  wire s185;
  wire s186;
  wire s187;
  wire s188;
  wire s189;
  wire s190;
  wire s191;
  wire s192;
  wire s193;
  wire s194;
  wire s195;
  wire s196;
  wire b11;
  wire s197;
  wire s198;
  wire s199;
  wire s200;
  wire s201;
  wire s202;
  wire s203;
  wire s204;
  wire s205;
  wire s206;
  wire s207;
  wire s208;
  wire s209;
  wire s210;
  wire s211;
  wire s212;
  wire s213;
  wire s214;
  wire s215;
  wire s216;
  wire s217;
  wire s218;
  wire s219;
  wire s220;
  wire s221;
  wire s222;
  wire s223;
  wire s224;
  wire s225;
  wire s226;
  wire s227;
  wire s228;
  wire s229;
  wire b10;
  wire s230;
  wire s231;
  wire s232;
  wire s233;
  wire s234;
  wire s235;
  wire s236;
  wire s237;
  wire s238;
  wire s239;
  wire s240;
  wire s241;
  wire s242;
  wire s243;
  wire s244;
  wire s245;
  wire s246;
  wire s247;
  wire s248;
  wire s249;
  wire s250;
  wire s251;
  wire s252;
  wire s253;
  wire s254;
  wire s255;
  wire s256;
  wire s257;
  wire s258;
  wire s259;
  wire s260;
  wire s261;
  wire s262;
  wire b9;
  wire s263;
  wire s264;
  wire s265;
  wire s266;
  wire s267;
  wire s268;
  wire s269;
  wire s270;
  wire s271;
  wire s272;
  wire s273;
  wire s274;
  wire s275;
  wire s276;
  wire s277;
  wire s278;
  wire s279;
  wire s280;
  wire s281;
  wire s282;
  wire s283;
  wire s284;
  wire s285;
  wire s286;
  wire s287;
  wire s288;
  wire s289;
  wire s290;
  wire s291;
  wire s292;
  wire s293;
  wire s294;
  wire s295;
  wire b8;
  wire s296;
  wire s297;
  wire s298;
  wire s299;
  wire s300;
  wire s301;
  wire s302;
  wire s303;
  wire s304;
  wire s305;
  wire s306;
  wire s307;
  wire s308;
  wire s309;
  wire s310;
  wire s311;
  wire s312;
  wire s313;
  wire s314;
  wire s315;
  wire s316;
  wire s317;
  wire s318;
  wire s319;
  wire s320;
  wire s321;
  wire s322;
  wire s323;
  wire s324;
  wire s325;
  wire s326;
  wire s327;
  wire s328;
  wire b7;
  wire s329;
  wire s330;
  wire s331;
  wire s332;
  wire s333;
  wire s334;
  wire s335;
  wire s336;
  wire s337;
  wire s338;
  wire s339;
  wire s340;
  wire s341;
  wire s342;
  wire s343;
  wire s344;
  wire s345;
  wire s346;
  wire s347;
  wire s348;
  wire s349;
  wire s350;
  wire s351;
  wire s352;
  wire s353;
  wire s354;
  wire s355;
  wire s356;
  wire s357;
  wire s358;
  wire s359;
  wire s360;
  wire s361;
  wire b6;
  wire s362;
  wire s363;
  wire s364;
  wire s365;
  wire s366;
  wire s367;
  wire s368;
  wire s369;
  wire s370;
  wire s371;
  wire s372;
  wire s373;
  wire s374;
  wire s375;
  wire s376;
  wire s377;
  wire s378;
  wire s379;
  wire s380;
  wire s381;
  wire s382;
  wire s383;
  wire s384;
  wire s385;
  wire s386;
  wire s387;
  wire s388;
  wire s389;
  wire s390;
  wire s391;
  wire s392;
  wire s393;
  wire s394;
  wire b5;
  wire s395;
  wire s396;
  wire s397;
  wire s398;
  wire s399;
  wire s400;
  wire s401;
  wire s402;
  wire s403;
  wire s404;
  wire s405;
  wire s406;
  wire s407;
  wire s408;
  wire s409;
  wire s410;
  wire s411;
  wire s412;
  wire s413;
  wire s414;
  wire s415;
  wire s416;
  wire s417;
  wire s418;
  wire s419;
  wire s420;
  wire s421;
  wire s422;
  wire s423;
  wire s424;
  wire s425;
  wire s426;
  wire s427;
  wire b4;
  wire s428;
  wire s429;
  wire s430;
  wire s431;
  wire s432;
  wire s433;
  wire s434;
  wire s435;
  wire s436;
  wire s437;
  wire s438;
  wire s439;
  wire s440;
  wire s441;
  wire s442;
  wire s443;
  wire s444;
  wire s445;
  wire s446;
  wire s447;
  wire s448;
  wire s449;
  wire s450;
  wire s451;
  wire s452;
  wire s453;
  wire s454;
  wire s455;
  wire s456;
  wire s457;
  wire s458;
  wire s459;
  wire s460;
  wire b3;
  wire s461;
  wire s462;
  wire s463;
  wire s464;
  wire s465;
  wire s466;
  wire s467;
  wire s468;
  wire s469;
  wire s470;
  wire s471;
  wire s472;
  wire s473;
  wire s474;
  wire s475;
  wire s476;
  wire s477;
  wire s478;
  wire s479;
  wire s480;
  wire s481;
  wire s482;
  wire s483;
  wire s484;
  wire s485;
  wire s486;
  wire s487;
  wire s488;
  wire s489;
  wire s490;
  wire s491;
  wire s492;
  wire s493;
  wire b2;
  wire s494;
  wire s495;
  wire s496;
  wire s497;
  wire s498;
  wire s499;
  wire s500;
  wire s501;
  wire s502;
  wire s503;
  wire s504;
  wire s505;
  wire s506;
  wire s507;
  wire s508;
  wire s509;
  wire s510;
  wire s511;
  wire s512;
  wire s513;
  wire s514;
  wire s515;
  wire s516;
  wire s517;
  wire s518;
  wire s519;
  wire s520;
  wire s521;
  wire s522;
  wire s523;
  wire s524;
  wire s525;
  wire s526;
  wire b1;
  wire s527;
  assign a16 = Bolen[0];
  assign a15 = Bolen[1];
  assign a14 = Bolen[2];
  assign a13 = Bolen[3];
  assign a12 = Bolen[4];
  assign a11 = Bolen[5];
  assign a10 = Bolen[6];
  assign a9 = Bolen[7];
  assign a8 = Bolen[8];
  assign a7 = Bolen[9];
  assign a6 = Bolen[10];
  assign a5 = Bolen[11];
  assign a4 = Bolen[12];
  assign a3 = Bolen[13];
  assign a2 = Bolen[14];
  assign a1 = Bolen[15];
  assign b1 = bolunen[0];
  assign b2 = bolunen[1];
  assign b3 = bolunen[2];
  assign b4 = bolunen[3];
  assign b5 = bolunen[4];
  assign b6 = bolunen[5];
  assign b7 = bolunen[6];
  assign b8 = bolunen[7];
  assign b9 = bolunen[8];
  assign b10 = bolunen[9];
  assign b11 = bolunen[10];
  assign b12 = bolunen[11];
  assign b13 = bolunen[12];
  assign b14 = bolunen[13];
  assign b15 = bolunen[14];
  assign b16 = bolunen[15];
  sub_multplex sub_multplex_i0 (
    .a( 1'b0 ),
    .b( a1 ),
    .bi( s0 ),
    .os( s1 ),
    .bo( s2 ),
    .d( s3 )
  );
  sub_multplex sub_multplex_i1 (
    .a( 1'b0 ),
    .b( a2 ),
    .bi( s4 ),
    .os( s1 ),
    .bo( s0 ),
    .d( s5 )
  );
  sub_multplex sub_multplex_i2 (
    .a( 1'b0 ),
    .b( a3 ),
    .bi( s6 ),
    .os( s1 ),
    .bo( s4 ),
    .d( s7 )
  );
  sub_multplex sub_multplex_i3 (
    .a( 1'b0 ),
    .b( a4 ),
    .bi( s8 ),
    .os( s1 ),
    .bo( s6 ),
    .d( s9 )
  );
  sub_multplex sub_multplex_i4 (
    .a( 1'b0 ),
    .b( a5 ),
    .bi( s10 ),
    .os( s1 ),
    .bo( s8 ),
    .d( s11 )
  );
  sub_multplex sub_multplex_i5 (
    .a( 1'b0 ),
    .b( a6 ),
    .bi( s12 ),
    .os( s1 ),
    .bo( s10 ),
    .d( s13 )
  );
  sub_multplex sub_multplex_i6 (
    .a( 1'b0 ),
    .b( a7 ),
    .bi( s14 ),
    .os( s1 ),
    .bo( s12 ),
    .d( s15 )
  );
  sub_multplex sub_multplex_i7 (
    .a( 1'b0 ),
    .b( a8 ),
    .bi( s16 ),
    .os( s1 ),
    .bo( s14 ),
    .d( s17 )
  );
  sub_multplex sub_multplex_i8 (
    .a( 1'b0 ),
    .b( a9 ),
    .bi( s18 ),
    .os( s1 ),
    .bo( s16 ),
    .d( s19 )
  );
  sub_multplex sub_multplex_i9 (
    .a( 1'b0 ),
    .b( a10 ),
    .bi( s20 ),
    .os( s1 ),
    .bo( s18 ),
    .d( s21 )
  );
  sub_multplex sub_multplex_i10 (
    .a( 1'b0 ),
    .b( a11 ),
    .bi( s22 ),
    .os( s1 ),
    .bo( s20 ),
    .d( s23 )
  );
  sub_multplex sub_multplex_i11 (
    .a( 1'b0 ),
    .b( a12 ),
    .bi( s24 ),
    .os( s1 ),
    .bo( s22 ),
    .d( s25 )
  );
  sub_multplex sub_multplex_i12 (
    .a( 1'b0 ),
    .b( a13 ),
    .bi( s26 ),
    .os( s1 ),
    .bo( s24 ),
    .d( s27 )
  );
  sub_multplex sub_multplex_i13 (
    .a( 1'b0 ),
    .b( a14 ),
    .bi( s28 ),
    .os( s1 ),
    .bo( s26 ),
    .d( s29 )
  );
  sub_multplex sub_multplex_i14 (
    .a( 1'b0 ),
    .b( a15 ),
    .bi( s30 ),
    .os( s1 ),
    .bo( s28 ),
    .d( s31 )
  );
  sub_multplex sub_multplex_i15 (
    .a( b16 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s1 ),
    .bo( s30 ),
    .d( s32 )
  );
  sub_multplex sub_multplex_i16 (
    .a( s5 ),
    .b( a1 ),
    .bi( s33 ),
    .os( s34 ),
    .bo( s35 ),
    .d( s36 )
  );
  sub_multplex sub_multplex_i17 (
    .a( s7 ),
    .b( a2 ),
    .bi( s37 ),
    .os( s34 ),
    .bo( s33 ),
    .d( s38 )
  );
  sub_multplex sub_multplex_i18 (
    .a( s9 ),
    .b( a3 ),
    .bi( s39 ),
    .os( s34 ),
    .bo( s37 ),
    .d( s40 )
  );
  sub_multplex sub_multplex_i19 (
    .a( s11 ),
    .b( a4 ),
    .bi( s41 ),
    .os( s34 ),
    .bo( s39 ),
    .d( s42 )
  );
  sub_multplex sub_multplex_i20 (
    .a( s13 ),
    .b( a5 ),
    .bi( s43 ),
    .os( s34 ),
    .bo( s41 ),
    .d( s44 )
  );
  sub_multplex sub_multplex_i21 (
    .a( s15 ),
    .b( a6 ),
    .bi( s45 ),
    .os( s34 ),
    .bo( s43 ),
    .d( s46 )
  );
  sub_multplex sub_multplex_i22 (
    .a( s17 ),
    .b( a7 ),
    .bi( s47 ),
    .os( s34 ),
    .bo( s45 ),
    .d( s48 )
  );
  sub_multplex sub_multplex_i23 (
    .a( s19 ),
    .b( a8 ),
    .bi( s49 ),
    .os( s34 ),
    .bo( s47 ),
    .d( s50 )
  );
  sub_multplex sub_multplex_i24 (
    .a( s21 ),
    .b( a9 ),
    .bi( s51 ),
    .os( s34 ),
    .bo( s49 ),
    .d( s52 )
  );
  sub_multplex sub_multplex_i25 (
    .a( s23 ),
    .b( a10 ),
    .bi( s53 ),
    .os( s34 ),
    .bo( s51 ),
    .d( s54 )
  );
  sub_multplex sub_multplex_i26 (
    .a( s25 ),
    .b( a11 ),
    .bi( s55 ),
    .os( s34 ),
    .bo( s53 ),
    .d( s56 )
  );
  sub_multplex sub_multplex_i27 (
    .a( s27 ),
    .b( a12 ),
    .bi( s57 ),
    .os( s34 ),
    .bo( s55 ),
    .d( s58 )
  );
  sub_multplex sub_multplex_i28 (
    .a( s29 ),
    .b( a13 ),
    .bi( s59 ),
    .os( s34 ),
    .bo( s57 ),
    .d( s60 )
  );
  sub_multplex sub_multplex_i29 (
    .a( s31 ),
    .b( a14 ),
    .bi( s61 ),
    .os( s34 ),
    .bo( s59 ),
    .d( s62 )
  );
  sub_multplex sub_multplex_i30 (
    .a( s32 ),
    .b( a15 ),
    .bi( s63 ),
    .os( s34 ),
    .bo( s61 ),
    .d( s64 )
  );
  sub_multplex sub_multplex_i31 (
    .a( b15 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s34 ),
    .bo( s63 ),
    .d( s65 )
  );
  sub_multplex sub_multplex_i32 (
    .a( s38 ),
    .b( a1 ),
    .bi( s66 ),
    .os( s67 ),
    .bo( s68 ),
    .d( s69 )
  );
  sub_multplex sub_multplex_i33 (
    .a( s40 ),
    .b( a2 ),
    .bi( s70 ),
    .os( s67 ),
    .bo( s66 ),
    .d( s71 )
  );
  sub_multplex sub_multplex_i34 (
    .a( s42 ),
    .b( a3 ),
    .bi( s72 ),
    .os( s67 ),
    .bo( s70 ),
    .d( s73 )
  );
  sub_multplex sub_multplex_i35 (
    .a( s44 ),
    .b( a4 ),
    .bi( s74 ),
    .os( s67 ),
    .bo( s72 ),
    .d( s75 )
  );
  sub_multplex sub_multplex_i36 (
    .a( s46 ),
    .b( a5 ),
    .bi( s76 ),
    .os( s67 ),
    .bo( s74 ),
    .d( s77 )
  );
  sub_multplex sub_multplex_i37 (
    .a( s48 ),
    .b( a6 ),
    .bi( s78 ),
    .os( s67 ),
    .bo( s76 ),
    .d( s79 )
  );
  sub_multplex sub_multplex_i38 (
    .a( s50 ),
    .b( a7 ),
    .bi( s80 ),
    .os( s67 ),
    .bo( s78 ),
    .d( s81 )
  );
  sub_multplex sub_multplex_i39 (
    .a( s52 ),
    .b( a8 ),
    .bi( s82 ),
    .os( s67 ),
    .bo( s80 ),
    .d( s83 )
  );
  sub_multplex sub_multplex_i40 (
    .a( s54 ),
    .b( a9 ),
    .bi( s84 ),
    .os( s67 ),
    .bo( s82 ),
    .d( s85 )
  );
  sub_multplex sub_multplex_i41 (
    .a( s56 ),
    .b( a10 ),
    .bi( s86 ),
    .os( s67 ),
    .bo( s84 ),
    .d( s87 )
  );
  sub_multplex sub_multplex_i42 (
    .a( s58 ),
    .b( a11 ),
    .bi( s88 ),
    .os( s67 ),
    .bo( s86 ),
    .d( s89 )
  );
  sub_multplex sub_multplex_i43 (
    .a( s60 ),
    .b( a12 ),
    .bi( s90 ),
    .os( s67 ),
    .bo( s88 ),
    .d( s91 )
  );
  sub_multplex sub_multplex_i44 (
    .a( s62 ),
    .b( a13 ),
    .bi( s92 ),
    .os( s67 ),
    .bo( s90 ),
    .d( s93 )
  );
  sub_multplex sub_multplex_i45 (
    .a( s64 ),
    .b( a14 ),
    .bi( s94 ),
    .os( s67 ),
    .bo( s92 ),
    .d( s95 )
  );
  sub_multplex sub_multplex_i46 (
    .a( s65 ),
    .b( a15 ),
    .bi( s96 ),
    .os( s67 ),
    .bo( s94 ),
    .d( s97 )
  );
  sub_multplex sub_multplex_i47 (
    .a( b14 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s67 ),
    .bo( s96 ),
    .d( s98 )
  );
  sub_multplex sub_multplex_i48 (
    .a( s71 ),
    .b( a1 ),
    .bi( s99 ),
    .os( s100 ),
    .bo( s101 ),
    .d( s102 )
  );
  sub_multplex sub_multplex_i49 (
    .a( s73 ),
    .b( a2 ),
    .bi( s103 ),
    .os( s100 ),
    .bo( s99 ),
    .d( s104 )
  );
  sub_multplex sub_multplex_i50 (
    .a( s75 ),
    .b( a3 ),
    .bi( s105 ),
    .os( s100 ),
    .bo( s103 ),
    .d( s106 )
  );
  sub_multplex sub_multplex_i51 (
    .a( s77 ),
    .b( a4 ),
    .bi( s107 ),
    .os( s100 ),
    .bo( s105 ),
    .d( s108 )
  );
  sub_multplex sub_multplex_i52 (
    .a( s79 ),
    .b( a5 ),
    .bi( s109 ),
    .os( s100 ),
    .bo( s107 ),
    .d( s110 )
  );
  sub_multplex sub_multplex_i53 (
    .a( s81 ),
    .b( a6 ),
    .bi( s111 ),
    .os( s100 ),
    .bo( s109 ),
    .d( s112 )
  );
  sub_multplex sub_multplex_i54 (
    .a( s83 ),
    .b( a7 ),
    .bi( s113 ),
    .os( s100 ),
    .bo( s111 ),
    .d( s114 )
  );
  sub_multplex sub_multplex_i55 (
    .a( s85 ),
    .b( a8 ),
    .bi( s115 ),
    .os( s100 ),
    .bo( s113 ),
    .d( s116 )
  );
  sub_multplex sub_multplex_i56 (
    .a( s87 ),
    .b( a9 ),
    .bi( s117 ),
    .os( s100 ),
    .bo( s115 ),
    .d( s118 )
  );
  sub_multplex sub_multplex_i57 (
    .a( s89 ),
    .b( a10 ),
    .bi( s119 ),
    .os( s100 ),
    .bo( s117 ),
    .d( s120 )
  );
  sub_multplex sub_multplex_i58 (
    .a( s91 ),
    .b( a11 ),
    .bi( s121 ),
    .os( s100 ),
    .bo( s119 ),
    .d( s122 )
  );
  sub_multplex sub_multplex_i59 (
    .a( s93 ),
    .b( a12 ),
    .bi( s123 ),
    .os( s100 ),
    .bo( s121 ),
    .d( s124 )
  );
  sub_multplex sub_multplex_i60 (
    .a( s95 ),
    .b( a13 ),
    .bi( s125 ),
    .os( s100 ),
    .bo( s123 ),
    .d( s126 )
  );
  sub_multplex sub_multplex_i61 (
    .a( s97 ),
    .b( a14 ),
    .bi( s127 ),
    .os( s100 ),
    .bo( s125 ),
    .d( s128 )
  );
  sub_multplex sub_multplex_i62 (
    .a( s98 ),
    .b( a15 ),
    .bi( s129 ),
    .os( s100 ),
    .bo( s127 ),
    .d( s130 )
  );
  sub_multplex sub_multplex_i63 (
    .a( b13 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s100 ),
    .bo( s129 ),
    .d( s131 )
  );
  sub_multplex sub_multplex_i64 (
    .a( s104 ),
    .b( a1 ),
    .bi( s132 ),
    .os( s133 ),
    .bo( s134 ),
    .d( s135 )
  );
  sub_multplex sub_multplex_i65 (
    .a( s106 ),
    .b( a2 ),
    .bi( s136 ),
    .os( s133 ),
    .bo( s132 ),
    .d( s137 )
  );
  sub_multplex sub_multplex_i66 (
    .a( s108 ),
    .b( a3 ),
    .bi( s138 ),
    .os( s133 ),
    .bo( s136 ),
    .d( s139 )
  );
  sub_multplex sub_multplex_i67 (
    .a( s110 ),
    .b( a4 ),
    .bi( s140 ),
    .os( s133 ),
    .bo( s138 ),
    .d( s141 )
  );
  sub_multplex sub_multplex_i68 (
    .a( s112 ),
    .b( a5 ),
    .bi( s142 ),
    .os( s133 ),
    .bo( s140 ),
    .d( s143 )
  );
  sub_multplex sub_multplex_i69 (
    .a( s114 ),
    .b( a6 ),
    .bi( s144 ),
    .os( s133 ),
    .bo( s142 ),
    .d( s145 )
  );
  sub_multplex sub_multplex_i70 (
    .a( s116 ),
    .b( a7 ),
    .bi( s146 ),
    .os( s133 ),
    .bo( s144 ),
    .d( s147 )
  );
  sub_multplex sub_multplex_i71 (
    .a( s118 ),
    .b( a8 ),
    .bi( s148 ),
    .os( s133 ),
    .bo( s146 ),
    .d( s149 )
  );
  sub_multplex sub_multplex_i72 (
    .a( s120 ),
    .b( a9 ),
    .bi( s150 ),
    .os( s133 ),
    .bo( s148 ),
    .d( s151 )
  );
  sub_multplex sub_multplex_i73 (
    .a( s122 ),
    .b( a10 ),
    .bi( s152 ),
    .os( s133 ),
    .bo( s150 ),
    .d( s153 )
  );
  sub_multplex sub_multplex_i74 (
    .a( s124 ),
    .b( a11 ),
    .bi( s154 ),
    .os( s133 ),
    .bo( s152 ),
    .d( s155 )
  );
  sub_multplex sub_multplex_i75 (
    .a( s126 ),
    .b( a12 ),
    .bi( s156 ),
    .os( s133 ),
    .bo( s154 ),
    .d( s157 )
  );
  sub_multplex sub_multplex_i76 (
    .a( s128 ),
    .b( a13 ),
    .bi( s158 ),
    .os( s133 ),
    .bo( s156 ),
    .d( s159 )
  );
  sub_multplex sub_multplex_i77 (
    .a( s130 ),
    .b( a14 ),
    .bi( s160 ),
    .os( s133 ),
    .bo( s158 ),
    .d( s161 )
  );
  sub_multplex sub_multplex_i78 (
    .a( s131 ),
    .b( a15 ),
    .bi( s162 ),
    .os( s133 ),
    .bo( s160 ),
    .d( s163 )
  );
  sub_multplex sub_multplex_i79 (
    .a( b12 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s133 ),
    .bo( s162 ),
    .d( s164 )
  );
  sub_multplex sub_multplex_i80 (
    .a( s137 ),
    .b( a1 ),
    .bi( s165 ),
    .os( s166 ),
    .bo( s167 ),
    .d( s168 )
  );
  sub_multplex sub_multplex_i81 (
    .a( s139 ),
    .b( a2 ),
    .bi( s169 ),
    .os( s166 ),
    .bo( s165 ),
    .d( s170 )
  );
  sub_multplex sub_multplex_i82 (
    .a( s141 ),
    .b( a3 ),
    .bi( s171 ),
    .os( s166 ),
    .bo( s169 ),
    .d( s172 )
  );
  sub_multplex sub_multplex_i83 (
    .a( s143 ),
    .b( a4 ),
    .bi( s173 ),
    .os( s166 ),
    .bo( s171 ),
    .d( s174 )
  );
  sub_multplex sub_multplex_i84 (
    .a( s145 ),
    .b( a5 ),
    .bi( s175 ),
    .os( s166 ),
    .bo( s173 ),
    .d( s176 )
  );
  sub_multplex sub_multplex_i85 (
    .a( s147 ),
    .b( a6 ),
    .bi( s177 ),
    .os( s166 ),
    .bo( s175 ),
    .d( s178 )
  );
  sub_multplex sub_multplex_i86 (
    .a( s149 ),
    .b( a7 ),
    .bi( s179 ),
    .os( s166 ),
    .bo( s177 ),
    .d( s180 )
  );
  sub_multplex sub_multplex_i87 (
    .a( s151 ),
    .b( a8 ),
    .bi( s181 ),
    .os( s166 ),
    .bo( s179 ),
    .d( s182 )
  );
  sub_multplex sub_multplex_i88 (
    .a( s153 ),
    .b( a9 ),
    .bi( s183 ),
    .os( s166 ),
    .bo( s181 ),
    .d( s184 )
  );
  sub_multplex sub_multplex_i89 (
    .a( s155 ),
    .b( a10 ),
    .bi( s185 ),
    .os( s166 ),
    .bo( s183 ),
    .d( s186 )
  );
  sub_multplex sub_multplex_i90 (
    .a( s157 ),
    .b( a11 ),
    .bi( s187 ),
    .os( s166 ),
    .bo( s185 ),
    .d( s188 )
  );
  sub_multplex sub_multplex_i91 (
    .a( s159 ),
    .b( a12 ),
    .bi( s189 ),
    .os( s166 ),
    .bo( s187 ),
    .d( s190 )
  );
  sub_multplex sub_multplex_i92 (
    .a( s161 ),
    .b( a13 ),
    .bi( s191 ),
    .os( s166 ),
    .bo( s189 ),
    .d( s192 )
  );
  sub_multplex sub_multplex_i93 (
    .a( s163 ),
    .b( a14 ),
    .bi( s193 ),
    .os( s166 ),
    .bo( s191 ),
    .d( s194 )
  );
  sub_multplex sub_multplex_i94 (
    .a( s164 ),
    .b( a15 ),
    .bi( s195 ),
    .os( s166 ),
    .bo( s193 ),
    .d( s196 )
  );
  sub_multplex sub_multplex_i95 (
    .a( b11 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s166 ),
    .bo( s195 ),
    .d( s197 )
  );
  sub_multplex sub_multplex_i96 (
    .a( s170 ),
    .b( a1 ),
    .bi( s198 ),
    .os( s199 ),
    .bo( s200 ),
    .d( s201 )
  );
  sub_multplex sub_multplex_i97 (
    .a( s172 ),
    .b( a2 ),
    .bi( s202 ),
    .os( s199 ),
    .bo( s198 ),
    .d( s203 )
  );
  sub_multplex sub_multplex_i98 (
    .a( s174 ),
    .b( a3 ),
    .bi( s204 ),
    .os( s199 ),
    .bo( s202 ),
    .d( s205 )
  );
  sub_multplex sub_multplex_i99 (
    .a( s176 ),
    .b( a4 ),
    .bi( s206 ),
    .os( s199 ),
    .bo( s204 ),
    .d( s207 )
  );
  sub_multplex sub_multplex_i100 (
    .a( s178 ),
    .b( a5 ),
    .bi( s208 ),
    .os( s199 ),
    .bo( s206 ),
    .d( s209 )
  );
  sub_multplex sub_multplex_i101 (
    .a( s180 ),
    .b( a6 ),
    .bi( s210 ),
    .os( s199 ),
    .bo( s208 ),
    .d( s211 )
  );
  sub_multplex sub_multplex_i102 (
    .a( s182 ),
    .b( a7 ),
    .bi( s212 ),
    .os( s199 ),
    .bo( s210 ),
    .d( s213 )
  );
  sub_multplex sub_multplex_i103 (
    .a( s184 ),
    .b( a8 ),
    .bi( s214 ),
    .os( s199 ),
    .bo( s212 ),
    .d( s215 )
  );
  sub_multplex sub_multplex_i104 (
    .a( s186 ),
    .b( a9 ),
    .bi( s216 ),
    .os( s199 ),
    .bo( s214 ),
    .d( s217 )
  );
  sub_multplex sub_multplex_i105 (
    .a( s188 ),
    .b( a10 ),
    .bi( s218 ),
    .os( s199 ),
    .bo( s216 ),
    .d( s219 )
  );
  sub_multplex sub_multplex_i106 (
    .a( s190 ),
    .b( a11 ),
    .bi( s220 ),
    .os( s199 ),
    .bo( s218 ),
    .d( s221 )
  );
  sub_multplex sub_multplex_i107 (
    .a( s192 ),
    .b( a12 ),
    .bi( s222 ),
    .os( s199 ),
    .bo( s220 ),
    .d( s223 )
  );
  sub_multplex sub_multplex_i108 (
    .a( s194 ),
    .b( a13 ),
    .bi( s224 ),
    .os( s199 ),
    .bo( s222 ),
    .d( s225 )
  );
  sub_multplex sub_multplex_i109 (
    .a( s196 ),
    .b( a14 ),
    .bi( s226 ),
    .os( s199 ),
    .bo( s224 ),
    .d( s227 )
  );
  sub_multplex sub_multplex_i110 (
    .a( s197 ),
    .b( a15 ),
    .bi( s228 ),
    .os( s199 ),
    .bo( s226 ),
    .d( s229 )
  );
  sub_multplex sub_multplex_i111 (
    .a( b10 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s199 ),
    .bo( s228 ),
    .d( s230 )
  );
  sub_multplex sub_multplex_i112 (
    .a( s203 ),
    .b( a1 ),
    .bi( s231 ),
    .os( s232 ),
    .bo( s233 ),
    .d( s234 )
  );
  sub_multplex sub_multplex_i113 (
    .a( s205 ),
    .b( a2 ),
    .bi( s235 ),
    .os( s232 ),
    .bo( s231 ),
    .d( s236 )
  );
  sub_multplex sub_multplex_i114 (
    .a( s207 ),
    .b( a3 ),
    .bi( s237 ),
    .os( s232 ),
    .bo( s235 ),
    .d( s238 )
  );
  sub_multplex sub_multplex_i115 (
    .a( s209 ),
    .b( a4 ),
    .bi( s239 ),
    .os( s232 ),
    .bo( s237 ),
    .d( s240 )
  );
  sub_multplex sub_multplex_i116 (
    .a( s211 ),
    .b( a5 ),
    .bi( s241 ),
    .os( s232 ),
    .bo( s239 ),
    .d( s242 )
  );
  sub_multplex sub_multplex_i117 (
    .a( s213 ),
    .b( a6 ),
    .bi( s243 ),
    .os( s232 ),
    .bo( s241 ),
    .d( s244 )
  );
  sub_multplex sub_multplex_i118 (
    .a( s215 ),
    .b( a7 ),
    .bi( s245 ),
    .os( s232 ),
    .bo( s243 ),
    .d( s246 )
  );
  sub_multplex sub_multplex_i119 (
    .a( s217 ),
    .b( a8 ),
    .bi( s247 ),
    .os( s232 ),
    .bo( s245 ),
    .d( s248 )
  );
  sub_multplex sub_multplex_i120 (
    .a( s219 ),
    .b( a9 ),
    .bi( s249 ),
    .os( s232 ),
    .bo( s247 ),
    .d( s250 )
  );
  sub_multplex sub_multplex_i121 (
    .a( s221 ),
    .b( a10 ),
    .bi( s251 ),
    .os( s232 ),
    .bo( s249 ),
    .d( s252 )
  );
  sub_multplex sub_multplex_i122 (
    .a( s223 ),
    .b( a11 ),
    .bi( s253 ),
    .os( s232 ),
    .bo( s251 ),
    .d( s254 )
  );
  sub_multplex sub_multplex_i123 (
    .a( s225 ),
    .b( a12 ),
    .bi( s255 ),
    .os( s232 ),
    .bo( s253 ),
    .d( s256 )
  );
  sub_multplex sub_multplex_i124 (
    .a( s227 ),
    .b( a13 ),
    .bi( s257 ),
    .os( s232 ),
    .bo( s255 ),
    .d( s258 )
  );
  sub_multplex sub_multplex_i125 (
    .a( s229 ),
    .b( a14 ),
    .bi( s259 ),
    .os( s232 ),
    .bo( s257 ),
    .d( s260 )
  );
  sub_multplex sub_multplex_i126 (
    .a( s230 ),
    .b( a15 ),
    .bi( s261 ),
    .os( s232 ),
    .bo( s259 ),
    .d( s262 )
  );
  sub_multplex sub_multplex_i127 (
    .a( b9 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s232 ),
    .bo( s261 ),
    .d( s263 )
  );
  sub_multplex sub_multplex_i128 (
    .a( s236 ),
    .b( a1 ),
    .bi( s264 ),
    .os( s265 ),
    .bo( s266 ),
    .d( s267 )
  );
  sub_multplex sub_multplex_i129 (
    .a( s238 ),
    .b( a2 ),
    .bi( s268 ),
    .os( s265 ),
    .bo( s264 ),
    .d( s269 )
  );
  sub_multplex sub_multplex_i130 (
    .a( s240 ),
    .b( a3 ),
    .bi( s270 ),
    .os( s265 ),
    .bo( s268 ),
    .d( s271 )
  );
  sub_multplex sub_multplex_i131 (
    .a( s242 ),
    .b( a4 ),
    .bi( s272 ),
    .os( s265 ),
    .bo( s270 ),
    .d( s273 )
  );
  sub_multplex sub_multplex_i132 (
    .a( s244 ),
    .b( a5 ),
    .bi( s274 ),
    .os( s265 ),
    .bo( s272 ),
    .d( s275 )
  );
  sub_multplex sub_multplex_i133 (
    .a( s246 ),
    .b( a6 ),
    .bi( s276 ),
    .os( s265 ),
    .bo( s274 ),
    .d( s277 )
  );
  sub_multplex sub_multplex_i134 (
    .a( s248 ),
    .b( a7 ),
    .bi( s278 ),
    .os( s265 ),
    .bo( s276 ),
    .d( s279 )
  );
  sub_multplex sub_multplex_i135 (
    .a( s250 ),
    .b( a8 ),
    .bi( s280 ),
    .os( s265 ),
    .bo( s278 ),
    .d( s281 )
  );
  sub_multplex sub_multplex_i136 (
    .a( s252 ),
    .b( a9 ),
    .bi( s282 ),
    .os( s265 ),
    .bo( s280 ),
    .d( s283 )
  );
  sub_multplex sub_multplex_i137 (
    .a( s254 ),
    .b( a10 ),
    .bi( s284 ),
    .os( s265 ),
    .bo( s282 ),
    .d( s285 )
  );
  sub_multplex sub_multplex_i138 (
    .a( s256 ),
    .b( a11 ),
    .bi( s286 ),
    .os( s265 ),
    .bo( s284 ),
    .d( s287 )
  );
  sub_multplex sub_multplex_i139 (
    .a( s258 ),
    .b( a12 ),
    .bi( s288 ),
    .os( s265 ),
    .bo( s286 ),
    .d( s289 )
  );
  sub_multplex sub_multplex_i140 (
    .a( s260 ),
    .b( a13 ),
    .bi( s290 ),
    .os( s265 ),
    .bo( s288 ),
    .d( s291 )
  );
  sub_multplex sub_multplex_i141 (
    .a( s262 ),
    .b( a14 ),
    .bi( s292 ),
    .os( s265 ),
    .bo( s290 ),
    .d( s293 )
  );
  sub_multplex sub_multplex_i142 (
    .a( s263 ),
    .b( a15 ),
    .bi( s294 ),
    .os( s265 ),
    .bo( s292 ),
    .d( s295 )
  );
  sub_multplex sub_multplex_i143 (
    .a( b8 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s265 ),
    .bo( s294 ),
    .d( s296 )
  );
  sub_multplex sub_multplex_i144 (
    .a( s269 ),
    .b( a1 ),
    .bi( s297 ),
    .os( s298 ),
    .bo( s299 ),
    .d( s300 )
  );
  sub_multplex sub_multplex_i145 (
    .a( s271 ),
    .b( a2 ),
    .bi( s301 ),
    .os( s298 ),
    .bo( s297 ),
    .d( s302 )
  );
  sub_multplex sub_multplex_i146 (
    .a( s273 ),
    .b( a3 ),
    .bi( s303 ),
    .os( s298 ),
    .bo( s301 ),
    .d( s304 )
  );
  sub_multplex sub_multplex_i147 (
    .a( s275 ),
    .b( a4 ),
    .bi( s305 ),
    .os( s298 ),
    .bo( s303 ),
    .d( s306 )
  );
  sub_multplex sub_multplex_i148 (
    .a( s277 ),
    .b( a5 ),
    .bi( s307 ),
    .os( s298 ),
    .bo( s305 ),
    .d( s308 )
  );
  sub_multplex sub_multplex_i149 (
    .a( s279 ),
    .b( a6 ),
    .bi( s309 ),
    .os( s298 ),
    .bo( s307 ),
    .d( s310 )
  );
  sub_multplex sub_multplex_i150 (
    .a( s281 ),
    .b( a7 ),
    .bi( s311 ),
    .os( s298 ),
    .bo( s309 ),
    .d( s312 )
  );
  sub_multplex sub_multplex_i151 (
    .a( s283 ),
    .b( a8 ),
    .bi( s313 ),
    .os( s298 ),
    .bo( s311 ),
    .d( s314 )
  );
  sub_multplex sub_multplex_i152 (
    .a( s285 ),
    .b( a9 ),
    .bi( s315 ),
    .os( s298 ),
    .bo( s313 ),
    .d( s316 )
  );
  sub_multplex sub_multplex_i153 (
    .a( s287 ),
    .b( a10 ),
    .bi( s317 ),
    .os( s298 ),
    .bo( s315 ),
    .d( s318 )
  );
  sub_multplex sub_multplex_i154 (
    .a( s289 ),
    .b( a11 ),
    .bi( s319 ),
    .os( s298 ),
    .bo( s317 ),
    .d( s320 )
  );
  sub_multplex sub_multplex_i155 (
    .a( s291 ),
    .b( a12 ),
    .bi( s321 ),
    .os( s298 ),
    .bo( s319 ),
    .d( s322 )
  );
  sub_multplex sub_multplex_i156 (
    .a( s293 ),
    .b( a13 ),
    .bi( s323 ),
    .os( s298 ),
    .bo( s321 ),
    .d( s324 )
  );
  sub_multplex sub_multplex_i157 (
    .a( s295 ),
    .b( a14 ),
    .bi( s325 ),
    .os( s298 ),
    .bo( s323 ),
    .d( s326 )
  );
  sub_multplex sub_multplex_i158 (
    .a( s296 ),
    .b( a15 ),
    .bi( s327 ),
    .os( s298 ),
    .bo( s325 ),
    .d( s328 )
  );
  sub_multplex sub_multplex_i159 (
    .a( b7 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s298 ),
    .bo( s327 ),
    .d( s329 )
  );
  sub_multplex sub_multplex_i160 (
    .a( s302 ),
    .b( a1 ),
    .bi( s330 ),
    .os( s331 ),
    .bo( s332 ),
    .d( s333 )
  );
  sub_multplex sub_multplex_i161 (
    .a( s304 ),
    .b( a2 ),
    .bi( s334 ),
    .os( s331 ),
    .bo( s330 ),
    .d( s335 )
  );
  sub_multplex sub_multplex_i162 (
    .a( s306 ),
    .b( a3 ),
    .bi( s336 ),
    .os( s331 ),
    .bo( s334 ),
    .d( s337 )
  );
  sub_multplex sub_multplex_i163 (
    .a( s308 ),
    .b( a4 ),
    .bi( s338 ),
    .os( s331 ),
    .bo( s336 ),
    .d( s339 )
  );
  sub_multplex sub_multplex_i164 (
    .a( s310 ),
    .b( a5 ),
    .bi( s340 ),
    .os( s331 ),
    .bo( s338 ),
    .d( s341 )
  );
  sub_multplex sub_multplex_i165 (
    .a( s312 ),
    .b( a6 ),
    .bi( s342 ),
    .os( s331 ),
    .bo( s340 ),
    .d( s343 )
  );
  sub_multplex sub_multplex_i166 (
    .a( s314 ),
    .b( a7 ),
    .bi( s344 ),
    .os( s331 ),
    .bo( s342 ),
    .d( s345 )
  );
  sub_multplex sub_multplex_i167 (
    .a( s316 ),
    .b( a8 ),
    .bi( s346 ),
    .os( s331 ),
    .bo( s344 ),
    .d( s347 )
  );
  sub_multplex sub_multplex_i168 (
    .a( s318 ),
    .b( a9 ),
    .bi( s348 ),
    .os( s331 ),
    .bo( s346 ),
    .d( s349 )
  );
  sub_multplex sub_multplex_i169 (
    .a( s320 ),
    .b( a10 ),
    .bi( s350 ),
    .os( s331 ),
    .bo( s348 ),
    .d( s351 )
  );
  sub_multplex sub_multplex_i170 (
    .a( s322 ),
    .b( a11 ),
    .bi( s352 ),
    .os( s331 ),
    .bo( s350 ),
    .d( s353 )
  );
  sub_multplex sub_multplex_i171 (
    .a( s324 ),
    .b( a12 ),
    .bi( s354 ),
    .os( s331 ),
    .bo( s352 ),
    .d( s355 )
  );
  sub_multplex sub_multplex_i172 (
    .a( s326 ),
    .b( a13 ),
    .bi( s356 ),
    .os( s331 ),
    .bo( s354 ),
    .d( s357 )
  );
  sub_multplex sub_multplex_i173 (
    .a( s328 ),
    .b( a14 ),
    .bi( s358 ),
    .os( s331 ),
    .bo( s356 ),
    .d( s359 )
  );
  sub_multplex sub_multplex_i174 (
    .a( s329 ),
    .b( a15 ),
    .bi( s360 ),
    .os( s331 ),
    .bo( s358 ),
    .d( s361 )
  );
  sub_multplex sub_multplex_i175 (
    .a( b6 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s331 ),
    .bo( s360 ),
    .d( s362 )
  );
  sub_multplex sub_multplex_i176 (
    .a( s335 ),
    .b( a1 ),
    .bi( s363 ),
    .os( s364 ),
    .bo( s365 ),
    .d( s366 )
  );
  sub_multplex sub_multplex_i177 (
    .a( s337 ),
    .b( a2 ),
    .bi( s367 ),
    .os( s364 ),
    .bo( s363 ),
    .d( s368 )
  );
  sub_multplex sub_multplex_i178 (
    .a( s339 ),
    .b( a3 ),
    .bi( s369 ),
    .os( s364 ),
    .bo( s367 ),
    .d( s370 )
  );
  sub_multplex sub_multplex_i179 (
    .a( s341 ),
    .b( a4 ),
    .bi( s371 ),
    .os( s364 ),
    .bo( s369 ),
    .d( s372 )
  );
  sub_multplex sub_multplex_i180 (
    .a( s343 ),
    .b( a5 ),
    .bi( s373 ),
    .os( s364 ),
    .bo( s371 ),
    .d( s374 )
  );
  sub_multplex sub_multplex_i181 (
    .a( s345 ),
    .b( a6 ),
    .bi( s375 ),
    .os( s364 ),
    .bo( s373 ),
    .d( s376 )
  );
  sub_multplex sub_multplex_i182 (
    .a( s347 ),
    .b( a7 ),
    .bi( s377 ),
    .os( s364 ),
    .bo( s375 ),
    .d( s378 )
  );
  sub_multplex sub_multplex_i183 (
    .a( s349 ),
    .b( a8 ),
    .bi( s379 ),
    .os( s364 ),
    .bo( s377 ),
    .d( s380 )
  );
  sub_multplex sub_multplex_i184 (
    .a( s351 ),
    .b( a9 ),
    .bi( s381 ),
    .os( s364 ),
    .bo( s379 ),
    .d( s382 )
  );
  sub_multplex sub_multplex_i185 (
    .a( s353 ),
    .b( a10 ),
    .bi( s383 ),
    .os( s364 ),
    .bo( s381 ),
    .d( s384 )
  );
  sub_multplex sub_multplex_i186 (
    .a( s355 ),
    .b( a11 ),
    .bi( s385 ),
    .os( s364 ),
    .bo( s383 ),
    .d( s386 )
  );
  sub_multplex sub_multplex_i187 (
    .a( s357 ),
    .b( a12 ),
    .bi( s387 ),
    .os( s364 ),
    .bo( s385 ),
    .d( s388 )
  );
  sub_multplex sub_multplex_i188 (
    .a( s359 ),
    .b( a13 ),
    .bi( s389 ),
    .os( s364 ),
    .bo( s387 ),
    .d( s390 )
  );
  sub_multplex sub_multplex_i189 (
    .a( s361 ),
    .b( a14 ),
    .bi( s391 ),
    .os( s364 ),
    .bo( s389 ),
    .d( s392 )
  );
  sub_multplex sub_multplex_i190 (
    .a( s362 ),
    .b( a15 ),
    .bi( s393 ),
    .os( s364 ),
    .bo( s391 ),
    .d( s394 )
  );
  sub_multplex sub_multplex_i191 (
    .a( b5 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s364 ),
    .bo( s393 ),
    .d( s395 )
  );
  sub_multplex sub_multplex_i192 (
    .a( s368 ),
    .b( a1 ),
    .bi( s396 ),
    .os( s397 ),
    .bo( s398 ),
    .d( s399 )
  );
  sub_multplex sub_multplex_i193 (
    .a( s370 ),
    .b( a2 ),
    .bi( s400 ),
    .os( s397 ),
    .bo( s396 ),
    .d( s401 )
  );
  sub_multplex sub_multplex_i194 (
    .a( s372 ),
    .b( a3 ),
    .bi( s402 ),
    .os( s397 ),
    .bo( s400 ),
    .d( s403 )
  );
  sub_multplex sub_multplex_i195 (
    .a( s374 ),
    .b( a4 ),
    .bi( s404 ),
    .os( s397 ),
    .bo( s402 ),
    .d( s405 )
  );
  sub_multplex sub_multplex_i196 (
    .a( s376 ),
    .b( a5 ),
    .bi( s406 ),
    .os( s397 ),
    .bo( s404 ),
    .d( s407 )
  );
  sub_multplex sub_multplex_i197 (
    .a( s378 ),
    .b( a6 ),
    .bi( s408 ),
    .os( s397 ),
    .bo( s406 ),
    .d( s409 )
  );
  sub_multplex sub_multplex_i198 (
    .a( s380 ),
    .b( a7 ),
    .bi( s410 ),
    .os( s397 ),
    .bo( s408 ),
    .d( s411 )
  );
  sub_multplex sub_multplex_i199 (
    .a( s382 ),
    .b( a8 ),
    .bi( s412 ),
    .os( s397 ),
    .bo( s410 ),
    .d( s413 )
  );
  sub_multplex sub_multplex_i200 (
    .a( s384 ),
    .b( a9 ),
    .bi( s414 ),
    .os( s397 ),
    .bo( s412 ),
    .d( s415 )
  );
  sub_multplex sub_multplex_i201 (
    .a( s386 ),
    .b( a10 ),
    .bi( s416 ),
    .os( s397 ),
    .bo( s414 ),
    .d( s417 )
  );
  sub_multplex sub_multplex_i202 (
    .a( s388 ),
    .b( a11 ),
    .bi( s418 ),
    .os( s397 ),
    .bo( s416 ),
    .d( s419 )
  );
  sub_multplex sub_multplex_i203 (
    .a( s390 ),
    .b( a12 ),
    .bi( s420 ),
    .os( s397 ),
    .bo( s418 ),
    .d( s421 )
  );
  sub_multplex sub_multplex_i204 (
    .a( s392 ),
    .b( a13 ),
    .bi( s422 ),
    .os( s397 ),
    .bo( s420 ),
    .d( s423 )
  );
  sub_multplex sub_multplex_i205 (
    .a( s394 ),
    .b( a14 ),
    .bi( s424 ),
    .os( s397 ),
    .bo( s422 ),
    .d( s425 )
  );
  sub_multplex sub_multplex_i206 (
    .a( s395 ),
    .b( a15 ),
    .bi( s426 ),
    .os( s397 ),
    .bo( s424 ),
    .d( s427 )
  );
  sub_multplex sub_multplex_i207 (
    .a( b4 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s397 ),
    .bo( s426 ),
    .d( s428 )
  );
  sub_multplex sub_multplex_i208 (
    .a( s401 ),
    .b( a1 ),
    .bi( s429 ),
    .os( s430 ),
    .bo( s431 ),
    .d( s432 )
  );
  sub_multplex sub_multplex_i209 (
    .a( s403 ),
    .b( a2 ),
    .bi( s433 ),
    .os( s430 ),
    .bo( s429 ),
    .d( s434 )
  );
  sub_multplex sub_multplex_i210 (
    .a( s405 ),
    .b( a3 ),
    .bi( s435 ),
    .os( s430 ),
    .bo( s433 ),
    .d( s436 )
  );
  sub_multplex sub_multplex_i211 (
    .a( s407 ),
    .b( a4 ),
    .bi( s437 ),
    .os( s430 ),
    .bo( s435 ),
    .d( s438 )
  );
  sub_multplex sub_multplex_i212 (
    .a( s409 ),
    .b( a5 ),
    .bi( s439 ),
    .os( s430 ),
    .bo( s437 ),
    .d( s440 )
  );
  sub_multplex sub_multplex_i213 (
    .a( s411 ),
    .b( a6 ),
    .bi( s441 ),
    .os( s430 ),
    .bo( s439 ),
    .d( s442 )
  );
  sub_multplex sub_multplex_i214 (
    .a( s413 ),
    .b( a7 ),
    .bi( s443 ),
    .os( s430 ),
    .bo( s441 ),
    .d( s444 )
  );
  sub_multplex sub_multplex_i215 (
    .a( s415 ),
    .b( a8 ),
    .bi( s445 ),
    .os( s430 ),
    .bo( s443 ),
    .d( s446 )
  );
  sub_multplex sub_multplex_i216 (
    .a( s417 ),
    .b( a9 ),
    .bi( s447 ),
    .os( s430 ),
    .bo( s445 ),
    .d( s448 )
  );
  sub_multplex sub_multplex_i217 (
    .a( s419 ),
    .b( a10 ),
    .bi( s449 ),
    .os( s430 ),
    .bo( s447 ),
    .d( s450 )
  );
  sub_multplex sub_multplex_i218 (
    .a( s421 ),
    .b( a11 ),
    .bi( s451 ),
    .os( s430 ),
    .bo( s449 ),
    .d( s452 )
  );
  sub_multplex sub_multplex_i219 (
    .a( s423 ),
    .b( a12 ),
    .bi( s453 ),
    .os( s430 ),
    .bo( s451 ),
    .d( s454 )
  );
  sub_multplex sub_multplex_i220 (
    .a( s425 ),
    .b( a13 ),
    .bi( s455 ),
    .os( s430 ),
    .bo( s453 ),
    .d( s456 )
  );
  sub_multplex sub_multplex_i221 (
    .a( s427 ),
    .b( a14 ),
    .bi( s457 ),
    .os( s430 ),
    .bo( s455 ),
    .d( s458 )
  );
  sub_multplex sub_multplex_i222 (
    .a( s428 ),
    .b( a15 ),
    .bi( s459 ),
    .os( s430 ),
    .bo( s457 ),
    .d( s460 )
  );
  sub_multplex sub_multplex_i223 (
    .a( b3 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s430 ),
    .bo( s459 ),
    .d( s461 )
  );
  sub_multplex sub_multplex_i224 (
    .a( s434 ),
    .b( a1 ),
    .bi( s462 ),
    .os( s463 ),
    .bo( s464 ),
    .d( s465 )
  );
  sub_multplex sub_multplex_i225 (
    .a( s436 ),
    .b( a2 ),
    .bi( s466 ),
    .os( s463 ),
    .bo( s462 ),
    .d( s467 )
  );
  sub_multplex sub_multplex_i226 (
    .a( s438 ),
    .b( a3 ),
    .bi( s468 ),
    .os( s463 ),
    .bo( s466 ),
    .d( s469 )
  );
  sub_multplex sub_multplex_i227 (
    .a( s440 ),
    .b( a4 ),
    .bi( s470 ),
    .os( s463 ),
    .bo( s468 ),
    .d( s471 )
  );
  sub_multplex sub_multplex_i228 (
    .a( s442 ),
    .b( a5 ),
    .bi( s472 ),
    .os( s463 ),
    .bo( s470 ),
    .d( s473 )
  );
  sub_multplex sub_multplex_i229 (
    .a( s444 ),
    .b( a6 ),
    .bi( s474 ),
    .os( s463 ),
    .bo( s472 ),
    .d( s475 )
  );
  sub_multplex sub_multplex_i230 (
    .a( s446 ),
    .b( a7 ),
    .bi( s476 ),
    .os( s463 ),
    .bo( s474 ),
    .d( s477 )
  );
  sub_multplex sub_multplex_i231 (
    .a( s448 ),
    .b( a8 ),
    .bi( s478 ),
    .os( s463 ),
    .bo( s476 ),
    .d( s479 )
  );
  sub_multplex sub_multplex_i232 (
    .a( s450 ),
    .b( a9 ),
    .bi( s480 ),
    .os( s463 ),
    .bo( s478 ),
    .d( s481 )
  );
  sub_multplex sub_multplex_i233 (
    .a( s452 ),
    .b( a10 ),
    .bi( s482 ),
    .os( s463 ),
    .bo( s480 ),
    .d( s483 )
  );
  sub_multplex sub_multplex_i234 (
    .a( s454 ),
    .b( a11 ),
    .bi( s484 ),
    .os( s463 ),
    .bo( s482 ),
    .d( s485 )
  );
  sub_multplex sub_multplex_i235 (
    .a( s456 ),
    .b( a12 ),
    .bi( s486 ),
    .os( s463 ),
    .bo( s484 ),
    .d( s487 )
  );
  sub_multplex sub_multplex_i236 (
    .a( s458 ),
    .b( a13 ),
    .bi( s488 ),
    .os( s463 ),
    .bo( s486 ),
    .d( s489 )
  );
  sub_multplex sub_multplex_i237 (
    .a( s460 ),
    .b( a14 ),
    .bi( s490 ),
    .os( s463 ),
    .bo( s488 ),
    .d( s491 )
  );
  sub_multplex sub_multplex_i238 (
    .a( s461 ),
    .b( a15 ),
    .bi( s492 ),
    .os( s463 ),
    .bo( s490 ),
    .d( s493 )
  );
  sub_multplex sub_multplex_i239 (
    .a( b2 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s463 ),
    .bo( s492 ),
    .d( s494 )
  );
  sub_multplex sub_multplex_i240 (
    .a( s467 ),
    .b( a1 ),
    .bi( s495 ),
    .os( s496 ),
    .bo( s497 ),
    .d( s498 )
  );
  sub_multplex sub_multplex_i241 (
    .a( s469 ),
    .b( a2 ),
    .bi( s499 ),
    .os( s496 ),
    .bo( s495 ),
    .d( s500 )
  );
  sub_multplex sub_multplex_i242 (
    .a( s471 ),
    .b( a3 ),
    .bi( s501 ),
    .os( s496 ),
    .bo( s499 ),
    .d( s502 )
  );
  sub_multplex sub_multplex_i243 (
    .a( s473 ),
    .b( a4 ),
    .bi( s503 ),
    .os( s496 ),
    .bo( s501 ),
    .d( s504 )
  );
  sub_multplex sub_multplex_i244 (
    .a( s475 ),
    .b( a5 ),
    .bi( s505 ),
    .os( s496 ),
    .bo( s503 ),
    .d( s506 )
  );
  sub_multplex sub_multplex_i245 (
    .a( s477 ),
    .b( a6 ),
    .bi( s507 ),
    .os( s496 ),
    .bo( s505 ),
    .d( s508 )
  );
  sub_multplex sub_multplex_i246 (
    .a( s479 ),
    .b( a7 ),
    .bi( s509 ),
    .os( s496 ),
    .bo( s507 ),
    .d( s510 )
  );
  sub_multplex sub_multplex_i247 (
    .a( s481 ),
    .b( a8 ),
    .bi( s511 ),
    .os( s496 ),
    .bo( s509 ),
    .d( s512 )
  );
  sub_multplex sub_multplex_i248 (
    .a( s483 ),
    .b( a9 ),
    .bi( s513 ),
    .os( s496 ),
    .bo( s511 ),
    .d( s514 )
  );
  sub_multplex sub_multplex_i249 (
    .a( s485 ),
    .b( a10 ),
    .bi( s515 ),
    .os( s496 ),
    .bo( s513 ),
    .d( s516 )
  );
  sub_multplex sub_multplex_i250 (
    .a( s487 ),
    .b( a11 ),
    .bi( s517 ),
    .os( s496 ),
    .bo( s515 ),
    .d( s518 )
  );
  sub_multplex sub_multplex_i251 (
    .a( s489 ),
    .b( a12 ),
    .bi( s519 ),
    .os( s496 ),
    .bo( s517 ),
    .d( s520 )
  );
  sub_multplex sub_multplex_i252 (
    .a( s491 ),
    .b( a13 ),
    .bi( s521 ),
    .os( s496 ),
    .bo( s519 ),
    .d( s522 )
  );
  sub_multplex sub_multplex_i253 (
    .a( s493 ),
    .b( a14 ),
    .bi( s523 ),
    .os( s496 ),
    .bo( s521 ),
    .d( s524 )
  );
  sub_multplex sub_multplex_i254 (
    .a( s494 ),
    .b( a15 ),
    .bi( s525 ),
    .os( s496 ),
    .bo( s523 ),
    .d( s526 )
  );
  sub_multplex sub_multplex_i255 (
    .a( b1 ),
    .b( a16 ),
    .bi( 1'b0 ),
    .os( s496 ),
    .bo( s525 ),
    .d( s527 )
  );
  assign Kalan[0] = s527;
  assign Kalan[1] = s526;
  assign Kalan[2] = s524;
  assign Kalan[3] = s522;
  assign Kalan[4] = s520;
  assign Kalan[5] = s518;
  assign Kalan[6] = s516;
  assign Kalan[7] = s514;
  assign Kalan[8] = s512;
  assign Kalan[9] = s510;
  assign Kalan[10] = s508;
  assign Kalan[11] = s506;
  assign Kalan[12] = s504;
  assign Kalan[13] = s502;
  assign Kalan[14] = s500;
  assign Kalan[15] = s498;
  sub_multplex sub_multplex_i256 (
    .a( 1'b0 ),
    .b( 1'b0 ),
    .bi( s2 ),
    .os( s1 ),
    .bo( s1 )
  );
  sub_multplex sub_multplex_i257 (
    .a( s3 ),
    .b( 1'b0 ),
    .bi( s35 ),
    .os( s34 ),
    .bo( s34 )
  );
  sub_multplex sub_multplex_i258 (
    .a( s36 ),
    .b( 1'b0 ),
    .bi( s68 ),
    .os( s67 ),
    .bo( s67 )
  );
  sub_multplex sub_multplex_i259 (
    .a( s69 ),
    .b( 1'b0 ),
    .bi( s101 ),
    .os( s100 ),
    .bo( s100 )
  );
  sub_multplex sub_multplex_i260 (
    .a( s102 ),
    .b( 1'b0 ),
    .bi( s134 ),
    .os( s133 ),
    .bo( s133 )
  );
  sub_multplex sub_multplex_i261 (
    .a( s135 ),
    .b( 1'b0 ),
    .bi( s167 ),
    .os( s166 ),
    .bo( s166 )
  );
  sub_multplex sub_multplex_i262 (
    .a( s168 ),
    .b( 1'b0 ),
    .bi( s200 ),
    .os( s199 ),
    .bo( s199 )
  );
  sub_multplex sub_multplex_i263 (
    .a( s201 ),
    .b( 1'b0 ),
    .bi( s233 ),
    .os( s232 ),
    .bo( s232 )
  );
  sub_multplex sub_multplex_i264 (
    .a( s234 ),
    .b( 1'b0 ),
    .bi( s266 ),
    .os( s265 ),
    .bo( s265 )
  );
  sub_multplex sub_multplex_i265 (
    .a( s267 ),
    .b( 1'b0 ),
    .bi( s299 ),
    .os( s298 ),
    .bo( s298 )
  );
  sub_multplex sub_multplex_i266 (
    .a( s300 ),
    .b( 1'b0 ),
    .bi( s332 ),
    .os( s331 ),
    .bo( s331 )
  );
  sub_multplex sub_multplex_i267 (
    .a( s333 ),
    .b( 1'b0 ),
    .bi( s365 ),
    .os( s364 ),
    .bo( s364 )
  );
  sub_multplex sub_multplex_i268 (
    .a( s366 ),
    .b( 1'b0 ),
    .bi( s398 ),
    .os( s397 ),
    .bo( s397 )
  );
  sub_multplex sub_multplex_i269 (
    .a( s399 ),
    .b( 1'b0 ),
    .bi( s431 ),
    .os( s430 ),
    .bo( s430 )
  );
  sub_multplex sub_multplex_i270 (
    .a( s432 ),
    .b( 1'b0 ),
    .bi( s464 ),
    .os( s463 ),
    .bo( s463 )
  );
  sub_multplex sub_multplex_i271 (
    .a( s465 ),
    .b( 1'b0 ),
    .bi( s497 ),
    .os( s496 ),
    .bo( s496 )
  );
  assign bolum[0] = ~ s496;
  assign bolum[1] = ~ s463;
  assign bolum[2] = ~ s430;
  assign bolum[3] = ~ s397;
  assign bolum[4] = ~ s364;
  assign bolum[5] = ~ s331;
  assign bolum[6] = ~ s298;
  assign bolum[7] = ~ s265;
  assign bolum[8] = ~ s232;
  assign bolum[9] = ~ s199;
  assign bolum[10] = ~ s166;
  assign bolum[11] = ~ s133;
  assign bolum[12] = ~ s100;
  assign bolum[13] = ~ s67;
  assign bolum[14] = ~ s34;
  assign bolum[15] = ~ s1;
endmodule
module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module Mux_16x1
(
    input [3:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    input in_4,
    input in_5,
    input in_6,
    input in_7,
    input in_8,
    input in_9,
    input in_10,
    input in_11,
    input in_12,
    input in_13,
    input in_14,
    input in_15,
    output reg out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module Alu (
  input [15:0] A,
  input [15:0] B,
  input carryIn,
  input [4:0] AluOp,
  output [15:0] Out,
  output Neg,
  output Zero,
  output CarryOut
);
  wire [3:0] sel;
  wire [15:0] s0;
  wire [15:0] s1;
  wire [15:0] s2;
  wire [15:0] s3;
  wire [15:0] s4;
  wire [15:0] s5;
  wire [15:0] s6;
  wire [15:0] s7;
  wire [15:0] s8;
  wire [15:0] s9;
  wire [15:0] s10;
  wire [15:0] s11;
  wire [15:0] s12;
  wire [15:0] s13;
  wire [15:0] s14;
  wire [15:0] Out_temp;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire [31:0] s22;
  assign s2 = (B & A);
  assign s3 = (B | A);
  assign s4 = (B ^ A);
  assign s20 = (AluOp[4] & carryIn);
  assign s5 = ~ B;
  DIG_Neg #(
    .Bits(16)
  )
  DIG_Neg_i0 (
    .in( B ),
    .out( s6 )
  );
  assign s11[3:0] = B[7:4];
  assign s11[7:4] = B[3:0];
  assign s11[11:8] = B[15:12];
  assign s11[15:12] = B[11:8];
  assign s10[7:0] = B[15:8];
  assign s10[15:8] = B[7:0];
  DIG_Mul_unsigned #(
    .Bits(16)
  )
  DIG_Mul_unsigned_i1 (
    .a( B ),
    .b( A ),
    .mul( s22 )
  );
  divs divs_i2 (
    .Bolen( A ),
    .bolunen( B ),
    .bolum( s13 ),
    .Kalan( s14 )
  );
  assign sel = AluOp[3:0];
  assign s19 = B[0];
  assign s21 = B[15];
  assign s18 = B[0];
  assign s17 = B[15];
  DIG_Add #(
    .Bits(16)
  )
  DIG_Add_i3 (
    .a( B ),
    .b( A ),
    .c_i( s20 ),
    .s( s0 ),
    .c_o( s15 )
  );
  DIG_Sub #(
    .Bits(16)
  )
  DIG_Sub_i4 (
    .a( B ),
    .b( A ),
    .c_i( s20 ),
    .s( s1 ),
    .c_o( s16 )
  );
  assign s9[13:0] = B[14:1];
  assign s9[14] = s21;
  assign s9[15] = s21;
  assign s8[14:0] = B[15:1];
  assign s8[15] = s20;
  assign s7[0] = s20;
  assign s7[15:1] = B[14:0];
  assign s12 = s22[15:0];
  Mux_16x1_NBits #(
    .Bits(16)
  )
  Mux_16x1_NBits_i5 (
    .sel( sel ),
    .in_0( A ),
    .in_1( s0 ),
    .in_2( s1 ),
    .in_3( s2 ),
    .in_4( s3 ),
    .in_5( s4 ),
    .in_6( s5 ),
    .in_7( s6 ),
    .in_8( s7 ),
    .in_9( s8 ),
    .in_10( s9 ),
    .in_11( s10 ),
    .in_12( s11 ),
    .in_13( s12 ),
    .in_14( s13 ),
    .in_15( s14 ),
    .out( Out_temp )
  );
  Mux_16x1 Mux_16x1_i6 (
    .sel( sel ),
    .in_0( 1'b0 ),
    .in_1( s15 ),
    .in_2( s16 ),
    .in_3( 1'b0 ),
    .in_4( 1'b0 ),
    .in_5( 1'b0 ),
    .in_6( 1'b0 ),
    .in_7( 1'b0 ),
    .in_8( s17 ),
    .in_9( s18 ),
    .in_10( s19 ),
    .in_11( 1'b0 ),
    .in_12( 1'b0 ),
    .in_13( 1'b0 ),
    .in_14( 1'b0 ),
    .in_15( 1'b0 ),
    .out( CarryOut )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i7 (
    .a( Out_temp ),
    .b( 16'b0 ),
    .\= ( Zero )
  );
  assign Neg = Out_temp[15];
  assign Out = Out_temp;
endmodule

module singExtend (
  input [15:0] inst, // instruction word
  output [15:0] \4S , // The four bits taken from Rs.
  output [15:0] \8SD , // The eight bits taken from Rs,Rd with sign extension.
  output [15:0] \4D  // The four bits taken from Rd.

);
  wire s0;
  assign \4D [3:0] = inst[7:4];
  assign \4D [15:4] = 12'b0;
  assign \4S [3:0] = inst[3:0];
  assign \4S [15:4] = 12'b0;
  assign s0 = inst[7];
  assign \8SD [6:0] = inst[6:0];
  assign \8SD [7] = s0;
  assign \8SD [8] = s0;
  assign \8SD [9] = s0;
  assign \8SD [10] = s0;
  assign \8SD [11] = s0;
  assign \8SD [12] = s0;
  assign \8SD [13] = s0;
  assign \8SD [14] = s0;
  assign \8SD [15] = s0;
endmodule

module controllogic (
  input A,
  input B,
  input C,
  input D,
  input E,
  input F,
  input G,
  output muxb0,
  output muxb1,
  output muxb2,
  output aluop0,
  output aluop1,
  output aluop2,
  output aluop3,
  output aluop4,
  output WE,
  output sf,
  output iem0,
  output iem1,
  output br0,
  output br1,
  output br2,
  output muxA,
  output ld,
  output st,
  output abs,
  output ioW,
  output ioR,
  output stPC,
  output Reti,
  output randomSel,
  output timerSel,
  output \read-flags ,
  output storeFlagI
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  assign timerSel = 1'b0;
  assign s5 = ~ A;
  assign s0 = ~ B;
  assign s1 = ~ C;
  assign s2 = ~ D;
  assign s3 = ~ E;
  assign s6 = ~ F;
  assign s4 = ~ G;
  assign muxb0 = ((A & s0 & s1 & s2 & s3 & F & s4) | (s5 & s1 & D & E & F & s4) | (s5 & B & C & s3 & s6 & s4) | (A & s0 & s1 & E & F & G) | (s5 & s0 & s1 & D & F & s4) | (A & s0 & s1 & D & s6 & G) | (s5 & s0 & s1 & D & E & s4) | (s5 & s0 & C & s2 & s3 & s4) | (s5 & B & s1 & s2 & s3 & G) | (A & s0 & s1 & D & s3 & s6) | (s5 & C & D & s6 & G) | (s5 & C & s2 & E & G) | (s5 & B & C & E & G) | (s5 & B & C & s2 & E));
  assign muxb1 = ((s5 & C & s2 & s3 & s6 & G) | (A & s0 & s2 & s3 & s6 & s4) | (s5 & B & s1 & s2 & s3 & s4) | (A & s0 & s1 & s2 & s3 & G) | (A & s0 & s1 & D & E & s4) | (s5 & s1 & D & F & G) | (s5 & C & D & s6 & s4) | (s5 & B & C & s6 & G) | (s5 & B & C & F & s4) | (s5 & C & s2 & E & s4) | (s5 & s0 & s1 & D & G) | (A & s0 & s1 & s3 & s6) | (s5 & B & D & E) | (s5 & B & C & E));
  assign muxb2 = ((s5 & B & C & D & E & F & G) | (s5 & C & s2 & s3 & s6 & s4) | (s5 & B & s2 & s3 & F & G) | (s5 & B & s1 & s3 & F & G) | (s5 & s0 & s1 & D & F & s4) | (s5 & s0 & C & D & s6 & G) | (A & s0 & s1 & s2 & F & G) | (s5 & s0 & C & s2 & s3 & s4) | (s5 & s0 & C & s2 & E & G) | (s5 & B & s1 & s2 & s3 & G) | (A & s0 & s1 & s2 & s3 & s4) | (A & s0 & s1 & D & E & G) | (s5 & s1 & D & E & s4));
  assign aluop0 = ((s5 & s0 & s1 & D & E & F & s4) | (s5 & s0 & C & s2 & s3 & s6 & G) | (s5 & s0 & C & s2 & s3 & F & s4) | (s5 & s0 & C & D & E & F & G) | (s5 & s1 & s2 & s3 & F & G) | (s5 & s0 & s1 & E & s6 & G) | (s5 & B & s1 & s2 & F));
  assign aluop1 = ((s5 & s0 & C & D & s3 & F & G) | (s5 & B & s1 & D & s3 & s4) | (s5 & s0 & C & D & E & s6) | (s5 & B & s1 & D & s3 & s6) | (A & s0 & s1 & D & F) | (s5 & B & s1 & s2 & E) | (A & s0 & s1 & D & E));
  assign aluop2 = ((s5 & B & s1 & D & s3 & F & s4) | (s5 & s0 & s2 & E & F & G) | (s5 & s0 & D & s3 & s6 & s4) | (s5 & s0 & C & s3 & F & G) | (s5 & s0 & C & s2 & E & F) | (s5 & s0 & C & D & s6) | (A & s0 & s1 & D & F) | (s5 & s0 & C & D & s3) | (A & s0 & s1 & D & E));
  assign aluop3 = ((s5 & s0 & D & E & F & G) | (s5 & s0 & C & D & F & s4) | (s5 & s0 & s1 & s2 & E & s4) | (s5 & s0 & s2 & E & s6) | (s5 & B & s1 & s3 & s6) | (A & s0 & s1 & D & F) | (s5 & s0 & C & s2 & s3) | (s5 & B & s1 & s2 & s3) | (A & s0 & s1 & D & E));
  assign aluop4 = ((s5 & B & C & s2 & s3 & s6 & G) | (s5 & B & C & s2 & s3 & F & s4) | (A & s0 & s1 & s2 & s3 & s6 & s4) | (s5 & s1 & D & E & s6 & s4) | (s5 & s0 & s1 & s2 & F & s4) | (s5 & s0 & C & D & s3 & G) | (s5 & B & s1 & s2 & E & G) | (s5 & B & s1 & D & s3 & G) | (A & s0 & s1 & D & E & F) | (s5 & s0 & s3 & F & G) | (s5 & s0 & D & s6 & s4) | (s5 & s0 & D & E & s6) | (s5 & s0 & C & E & s6) | (s0 & s1 & D & E & F & s4) | (s0 & s1 & s3 & F & G));
  assign WE = ((s5 & D & s3 & F & s4) | (s5 & s1 & E & s6 & s4) | (s5 & s1 & E & F & G) | (s5 & C & s2 & s3 & s4) | (s5 & s1 & D & s3 & s6) | (s5 & C & s2 & s3 & F) | (s5 & s0 & C & s6) | (s5 & s1 & s2 & E) | (s5 & s0 & C & s3) | (s5 & s0 & C & s2) | (s0 & s1 & s2 & s3 & G) | (s0 & s1 & F & G) | (s0 & s1 & D & s4) | (s0 & s1 & s3 & F) | (s0 & s1 & D & E));
  assign sf = ((s5 & s1 & D & s3 & s6 & s4) | (A & s0 & s1 & D & s6 & G) | (A & s0 & s1 & D & s3 & F) | (s5 & s0 & s2 & F & s4) | (s5 & s0 & D & F & G) | (s5 & s0 & s1 & F & G) | (s5 & s0 & C & s6) | (s5 & B & s1 & s2) | (s5 & s0 & E) | (s0 & s1 & D & E & s4));
  assign iem0 = ((s5 & s0 & C & s2 & s3 & s6 & G) | (A & s0 & s1 & s2 & s3 & s6 & G) | (A & s0 & C & s2 & s3 & s6 & s4) | (s5 & C & D & E & s6 & s4) | (A & s0 & s1 & E & F & s4) | (s5 & s0 & C & D & s6 & s4) | (s5 & B & C & D & F & s4) | (s5 & s0 & C & s2 & E & s4) | (s5 & B & s1 & s2 & s3 & s4) | (A & s0 & s1 & D & E & s4) | (s5 & s1 & D & E & G) | (s5 & s0 & s1 & D & G));
  assign iem1 = ((s5 & B & s1 & D & E & s6 & G) | (s5 & B & C & D & E & F & s4));
  assign br0 = ((s5 & B & C & s2 & E & F & G) | (s5 & B & C & D & s6 & G) | (s5 & B & C & D & s3 & s6));
  assign br1 = ((s5 & B & C & s2 & E & s6 & G) | (s5 & B & C & s2 & E & F & s4) | (s5 & B & C & D & s3 & s6));
  assign br2 = ((s5 & B & C & D & s3 & s6 & G) | (s5 & B & C & s2 & E & s4) | (s5 & B & C & s2 & E & F));
  assign muxA = ((s5 & B & s1 & D & E & s6 & s4) | (s5 & B & C & s2 & s3 & F & s4) | (A & s0 & s1 & s2 & s3 & G) | (A & s0 & s1 & s2 & s3 & F));
  assign ld = ((s5 & B & s1 & D & E & s6 & s4) | (s5 & B & s1 & D & E & F & G) | (s5 & B & C & s2 & s3 & s4));
  assign st = ((s5 & B & s1 & D & s3 & F & G) | (s5 & B & s1 & D & E & s6 & G) | (s5 & B & s1 & D & E & F & s4) | (s5 & B & C & s2 & s3 & s6 & G));
  assign abs = ((s5 & B & C & D & E & s6 & s4) | (A & s0 & s1 & s2 & E & s6 & s4) | (A & s0 & C & s2 & s3 & s6 & s4) | (s5 & B & C & D & s3 & F));
  assign ioW = ((A & s0 & s1 & s2 & s3 & s6 & s4) | (s5 & B & C & D & E & F));
  assign ioR = ((A & s0 & s1 & s2 & s3 & G) | (A & s0 & s1 & s2 & s3 & F));
  assign stPC = (s5 & B & C & D & s3 & F & s4);
  assign Reti = (A & s0 & s1 & s2 & E & s6 & s4);
  assign randomSel = (A & s0 & s1 & s2 & E & F & G);
  assign \read-flags  = (A & s0 & s1 & D & s3 & s6 & s4);
  assign storeFlagI = (A & s0 & s1 & D & s3 & s6 & G);
endmodule

module vonNeumann (
  input [7:0] \Input ,
  input rst_n,
  input spiMiso,
  input RX,
  input clk_internal,
  output [3:0] debugOut,
  output spiClk,
  output spiMosi,
  output spiCSRam,
  output [7:0] \Output ,
  output TX,
  output spiCSProg
);
  wire muxA;
  wire [15:0] s0;
  wire [15:0] DataOut;
  wire [15:0] s1;
  wire [2:0] muxB;
  wire [15:0] s2;
  wire [15:0] s3;
  wire [15:0] s4;
  wire [15:0] s5;
  wire [15:0] s6;
  wire [15:0] CurrentOpcode;
  wire [3:0] s7;
  wire [3:0] s8;
  wire [7:0] OPcode;
  wire [2:0] s9;
  wire [15:0] AddrOut;
  wire [15:0] din_bus;
  wire [15:0] iow_Din;
  wire [15:0] s10;
  wire [15:0] RandomNUM;
  wire [15:0] FlagOut;
  wire [15:0] s11;
  wire [1:0] s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire [2:0] br;
  wire imm;
  wire [1:0] iem;
  wire pcClock;
  wire [15:0] s18;
  wire ld;
  wire stPC;
  wire RandomNUMSel;
  wire ioR;
  wire read_the_flags;
  wire [6:0] s19;
  wire [6:0] s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire s31;
  wire s32;
  wire s33;
  wire s34;
  wire s35;
  wire WE;
  wire sf;
  wire s36;
  wire s37;
  wire s38;
  wire s39;
  wire s40;
  wire st;
  wire abs;
  wire ioW;
  wire Reti;
  wire timer_Sel;
  wire store_the_flags;
  wire [4:0] aluOp;
  wire InterLock;
  wire s41;
  wire intr;
  wire s42;
  wire s43;
  wire s44;
  wire s45;
  wire interEnable;
  wire s46;
  wire s47;
  wire [15:0] s48;
  wire s49;
  wire s50;
  wire s51;
  wire s52;
  wire s53;
  wire spi_busy_ram;
  wire [15:0] s54;
  wire s55;
  wire s56;
  wire [7:0] s57;
  wire s58;
  wire s59;
  wire [7:0] s60;
  wire rst;
  wire [15:0] time0In;
  wire s61;
  wire timer0En;
  wire s62;
  wire [15:0] s63;
  wire s64;
  wire s65;
  wire s66;
  wire [7:0] outputToOutsideEnable;
  wire [15:0] programAddr;
  wire [15:0] s67;
  wire [15:0] time1In;
  wire s68;
  wire timer1En;
  wire [15:0] time2In;
  wire s69;
  wire timer2En;
  wire [15:0] s70;
  wire s71;
  wire [15:0] s72;
  wire s73;
  wire s74;
  wire s75;
  wire s76;
  wire [15:0] s77;
  wire [15:0] s78;
  wire s79;
  wire [15:0] s80;
  wire s81;
  wire s82;
  wire s83;
  wire [15:0] s84;
  wire s85;
  wire inputEn;
  wire [15:0] inputReg;
  wire s86;
  wire s87;
  wire interEn;
  wire [15:0] interruptReg;
  wire s88;
  wire s89;
  wire s90;
  wire s91;
  wire s92;
  wire s93;
  wire s94;
  wire s95;
  wire s96;
  wire s97;
  wire s98;
  wire s99;
  wire [11:0] const12b0;
  wire Exevute;
  wire [15:0] s100;
  wire [15:0] s101;
  wire [2:0] s102;
  wire const1b0;
  wire instRead;
  wire [15:0] s103;
  wire s104;
  wire [15:0] programOpcode;
  wire instDecode;
  wire s105;
  wire s106;
  wire s107;
  wire s108;
  wire s109;
  wire s110;
  wire s111;
  wire instFetch;
  assign const12b0 = 12'b0;
  assign const1b0 = 1'b0;
  assign s18[0] = \Input [0];
  assign s18[1] = \Input [1];
  assign s18[2] = \Input [2];
  assign s18[3] = \Input [3];
  assign s18[4] = \Input [4];
  assign s18[5] = \Input [5];
  assign s18[6] = \Input [6];
  assign s18[7] = \Input [7];
  assign s18[15:8] = 8'b0;
  assign s43 = ~ clk_internal;
  assign s45 = ~ clk_internal;
  assign rst = ~ rst_n;
  assign s88 = const12b0[0];
  assign s89 = const12b0[1];
  assign s90 = const12b0[2];
  assign s91 = const12b0[3];
  assign s92 = const12b0[4];
  assign s93 = const12b0[5];
  assign s94 = const12b0[6];
  assign s95 = const12b0[7];
  assign s96 = const12b0[8];
  assign s97 = const12b0[9];
  assign s98 = const12b0[10];
  assign s99 = const12b0[11];
  // *
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s42 ),
    .C( s43 ),
    .Q( InterLock )
  );
  // *
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( s44 ),
    .C( s45 ),
    .Q( s41 )
  );
  assign s44 = ((s41 & ~ Reti) | ((~ InterLock & (s99 | s98 | s97 | s96 | s95 | s94 | s93 | s92 | s91 | s90 | s89 | s88 | s76 | s69 | s68 | s61)) & interEnable));
  // SpiRam
  spiden spiden_i2 (
    .spi_miso( spiMiso ),
    .Address( s48 ),
    .clk( clk_internal ),
    .st( s49 ),
    .DataIn( DataOut ),
    .ld( s50 ),
    .spi_rst( s51 ),
    .spi_clk( s52 ),
    .spi_mosi( s53 ),
    .Busy( spi_busy_ram ),
    .data_out( s54 )
  );
  // timer0
  timer timer_i3 (
    .dOut( DataOut ),
    .Addr( AddrOut ),
    .ioW( ioW ),
    .ioR( ioR ),
    .C( pcClock ),
    .InterLock( InterLock ),
    .timerConfigAddr( 16'b1 ),
    .timerTargetAddr( 16'b10 ),
    .timerResetAddr( 16'b11 ),
    .timerReadAddr( 16'b1 ),
    .rst( rst ),
    .TimerOut( time0In ),
    .\timer?nterrupt ( s61 ),
    .TimerEn( timer0En )
  );
  // NegR
  register_1bit register_1bit_i4 (
    .D( s64 ),
    .C( clk_internal ),
    .en( sf ),
    .rst( rst ),
    .Q( s15 )
  );
  // ZeroR
  register_1bit register_1bit_i5 (
    .D( s65 ),
    .C( clk_internal ),
    .en( sf ),
    .rst( rst ),
    .Q( s14 )
  );
  // CarryR
  register_1bit register_1bit_i6 (
    .D( s66 ),
    .C( clk_internal ),
    .en( sf ),
    .rst( rst ),
    .Q( s13 )
  );
  // outputReg
  register_8bit register_8bit_i7 (
    .D( s60 ),
    .C( pcClock ),
    .en( s59 ),
    .rst( rst ),
    .Q( outputToOutsideEnable )
  );
  // OutoutEnReg
  register_8bit register_8bit_i8 (
    .D( s57 ),
    .C( pcClock ),
    .en( s56 ),
    .rst( rst ),
    .Q( \Output  )
  );
  // programCounter
  programCounter programCounter_i9 (
    .AluIn( AddrOut ),
    .clk( pcClock ),
    .rst( rst ),
    .absJmp( abs ),
    .intr( s46 ),
    .reti( s47 ),
    .relJmp( s17 ),
    .Nextpc( s10 ),
    .PC( programAddr )
  );
  // timer1
  timer timer_i10 (
    .dOut( DataOut ),
    .Addr( AddrOut ),
    .ioW( ioW ),
    .ioR( ioR ),
    .C( pcClock ),
    .InterLock( InterLock ),
    .timerConfigAddr( 16'b100 ),
    .timerTargetAddr( 16'b101 ),
    .timerResetAddr( 16'b110 ),
    .timerReadAddr( 16'b10 ),
    .rst( rst ),
    .TimerOut( time1In ),
    .\timer?nterrupt ( s68 ),
    .TimerEn( timer1En )
  );
  // timer2
  timer timer_i11 (
    .dOut( DataOut ),
    .Addr( AddrOut ),
    .ioW( ioW ),
    .ioR( ioR ),
    .C( pcClock ),
    .InterLock( InterLock ),
    .timerConfigAddr( 16'b111 ),
    .timerTargetAddr( 16'b1000 ),
    .timerResetAddr( 16'b1001 ),
    .timerReadAddr( 16'b11 ),
    .rst( rst ),
    .TimerOut( time2In ),
    .\timer?nterrupt ( s69 ),
    .TimerEn( timer2En )
  );
  RegisterBlock RegisterBlock_i12 (
    .DataIn( s11 ),
    .WE( WE ),
    .clk( pcClock ),
    .src( s7 ),
    .Dest( s8 ),
    .rst( rst ),
    .RDest( s0 ),
    .Rsrc( DataOut )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i13 (
    .sel( InterLock ),
    .in_0( s18 ),
    .in_1( s72 ),
    .out( s70 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i14 (
    .sel( s75 ),
    .in_0( s18 ),
    .in_1( s72 ),
    .out( s77 )
  );
  assign s84[0] = s61;
  assign s84[1] = s68;
  assign s84[2] = s69;
  assign s84[3] = s76;
  assign s84[4] = s88;
  assign s84[5] = s89;
  assign s84[6] = s90;
  assign s84[7] = s91;
  assign s84[8] = s92;
  assign s84[9] = s93;
  assign s84[10] = s94;
  assign s84[11] = s95;
  assign s84[12] = s96;
  assign s84[13] = s97;
  assign s84[14] = s98;
  assign s84[15] = s99;
  uartBlock uartBlock_i15 (
    .RX( RX ),
    .rst( rst ),
    .dataIn( DataOut ),
    .Addr( AddrOut ),
    .ioW( ioW ),
    .ioR( ioR ),
    .clk( pcClock ),
    .localclk( clk_internal ),
    .transmitAddr( 16'b10000 ),
    .ReceiveAddr( 16'b101 ),
    .TX( TX )
  );
  assign s102[0] = (interEn | timer0En | timer2En);
  assign s102[1] = (inputEn | timer0En | const1b0);
  assign s102[2] = (timer1En | timer2En | const1b0);
  assign s51 = (rst | ~ (s49 | s50));
  // ClockCont
  ClockCont ClockCont_i16 (
    .Clk( clk_internal ),
    .Enable( spi_busy_ram ),
    .rst( rst ),
    .instRead( instRead ),
    .instFetch( instFetch ),
    .instDecode( instDecode ),
    .instExecute( Exevute )
  );
  assign FlagOut[0] = s13;
  assign FlagOut[1] = s14;
  assign FlagOut[2] = s15;
  assign FlagOut[15:3] = 13'b0;
  Driver Driver_i17 (
    .in( s52 ),
    .sel( spi_busy_ram ),
    .out( spiClk )
  );
  Driver Driver_i18 (
    .in( s53 ),
    .sel( spi_busy_ram ),
    .out( spiMosi )
  );
  // pgr
  DIG_ROM_65536X16_pgr DIG_ROM_65536X16_pgr_i19 (
    .A( programAddr ),
    .sel( 1'b1 ),
    .D( s67 )
  );
  Mux_2x1 Mux_2x1_i20 (
    .sel( 1'b0 ),
    .in_0( Exevute ),
    .in_1( clk_internal ),
    .out( pcClock )
  );
  assign s103[0] = 1'b0;
  assign s103[15:1] = programAddr[14:0];
  Demux1 #(
    .Default(0)
  )
  Demux1_i21 (
    .sel( instRead ),
    .in( spi_busy_ram ),
    .out_0( s62 ),
    .out_1( s105 )
  );
  assign s57 = DataOut[7:0];
  assign s60 = DataOut[7:0];
  assign spiCSRam = ~ s62;
  assign debugOut[0] = pcClock;
  assign debugOut[1] = pcClock;
  assign debugOut[2] = pcClock;
  assign debugOut[3] = pcClock;
  assign spiCSProg = ~ s105;
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i22 (
    .sel( muxA ),
    .in_0( s0 ),
    .in_1( DataOut ),
    .out( s1 )
  );
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i23 (
    .sel( muxB ),
    .in_0( DataOut ),
    .in_1( 16'b0 ),
    .in_2( s2 ),
    .in_3( 16'b0 ),
    .in_4( 16'b0 ),
    .in_5( s3 ),
    .in_6( s4 ),
    .in_7( s5 ),
    .out( s6 )
  );
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i24 (
    .sel( s9 ),
    .in_0( AddrOut ),
    .in_1( din_bus ),
    .in_2( iow_Din ),
    .in_3( s10 ),
    .in_4( 16'b0 ),
    .in_5( RandomNUM ),
    .in_6( FlagOut ),
    .in_7( 16'b0 ),
    .out( s11 )
  );
  Mux_4x1 Mux_4x1_i25 (
    .sel( s12 ),
    .in_0( 1'b0 ),
    .in_1( s13 ),
    .in_2( s14 ),
    .in_3( s15 ),
    .out( s16 )
  );
  ImReg ImReg_i26 (
    .en( imm ),
    .iem( iem ),
    .C( pcClock ),
    .inst( CurrentOpcode ),
    .imm( s2 )
  );
  assign intr = (~ InterLock & ~ imm & s41 & ~ 1'b0);
  assign s42 = ((InterLock & ~ Reti) | intr);
  // intEn
  \1_addressable_register  \1_addressable_register_i27 (
    .Datain( DataOut ),
    .ioW( ioW ),
    .addrIn( AddrOut ),
    .address( 16'b1010 ),
    .clk( clk_internal ),
    .DataOut( interEnable )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i28 (
    .D( s70 ),
    .C( pcClock ),
    .en( s71 ),
    .Q( s72 )
  );
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i29 (
    .a( s70 ),
    .b( s72 ),
    .\> ( s73 ),
    .\< ( s74 )
  );
  \1_addressable_register  \1_addressable_register_i30 (
    .Datain( DataOut ),
    .ioW( ioW ),
    .addrIn( AddrOut ),
    .address( 16'b1110 ),
    .clk( pcClock ),
    .DataOut( s75 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i31 (
    .D( s78 ),
    .C( pcClock ),
    .en( s79 ),
    .Q( s80 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i32 (
    .sel( s83 ),
    .in_0( s84 ),
    .in_1( DataOut ),
    .out( s78 )
  );
  DriverBus #(
    .Bits(16)
  )
  DriverBus_i33 (
    .in( s77 ),
    .sel( inputEn ),
    .out( inputReg )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i34 (
    .sel( 1'b0 ),
    .in_0( s100 ),
    .in_1( s67 ),
    .out( s101 )
  );
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i35 (
    .sel( s102 ),
    .in_0( 16'b0 ),
    .in_1( interruptReg ),
    .in_2( inputReg ),
    .in_3( time0In ),
    .in_4( time1In ),
    .in_5( time2In ),
    .in_6( 16'b0 ),
    .in_7( 16'b0 ),
    .out( iow_Din )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i36 (
    .sel( instRead ),
    .in_0( s63 ),
    .in_1( s103 ),
    .out( s48 )
  );
  DemuxBus1 #(
    .Bits(16),
    .Default(0)
  )
  DemuxBus1_i37 (
    .sel( s104 ),
    .in( s54 ),
    .out_0( din_bus ),
    .out_1( programOpcode )
  );
  assign s50 = (ld | instRead);
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i38 (
    .sel( instDecode ),
    .in_0( 16'b0 ),
    .in_1( s101 ),
    .out( CurrentOpcode )
  );
  lfsr_RandomNumberGen lfsr_RandomNumberGen_i39 (
    .adrrIn( AddrOut ),
    .dataIn( DataOut ),
    .ioW( ioW ),
    .clk( pcClock ),
    .SeedAdr( 16'b1101 ),
    .Out( RandomNUM )
  );
  Alu Alu_i40 (
    .A( s1 ),
    .B( s6 ),
    .carryIn( s13 ),
    .AluOp( aluOp ),
    .Out( AddrOut ),
    .Neg( s106 ),
    .Zero( s107 ),
    .CarryOut( s108 )
  );
  // Instruction
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i41 (
    .D( programOpcode ),
    .C( instFetch ),
    .en( 1'b1 ),
    .Q( s100 )
  );
  singExtend singExtend_i42 (
    .inst( CurrentOpcode ),
    .\4S ( s3 ),
    .\8SD ( s4 ),
    .\4D ( s5 )
  );
  assign s46 = (intr & interEnable);
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i43 (
    .a( AddrOut ),
    .b( 16'b1011 ),
    .\= ( s55 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i44 (
    .a( AddrOut ),
    .b( 16'b1100 ),
    .\= ( s58 )
  );
  assign s63[0] = 1'b0;
  assign s63[15:1] = AddrOut[14:0];
  assign s71 = (s73 | s74);
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i45 (
    .a( s78 ),
    .b( s80 ),
    .\> ( s81 ),
    .\< ( s82 )
  );
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i46 (
    .a( 16'b1010 ),
    .b( AddrOut ),
    .\= ( s85 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i47 (
    .a( AddrOut ),
    .b( 16'b1011 ),
    .\= ( s86 )
  );
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i48 (
    .a( 16'b100 ),
    .b( AddrOut ),
    .\= ( s87 )
  );
  assign s7 = CurrentOpcode[3:0];
  assign s8 = CurrentOpcode[7:4];
  assign OPcode = CurrentOpcode[15:8];
  assign s109 = s1[0];
  assign s110 = s1[1];
  assign s111 = s1[2];
  assign s76 = (s71 & s75);
  assign s79 = (s81 | s82);
  assign s19 = OPcode[6:0];
  assign imm = OPcode[7];
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i49 (
    .sel( imm ),
    .in_0( s19 ),
    .in_1( 7'b0 ),
    .out( s20 )
  );
  assign s27 = s20[0];
  assign s26 = s20[1];
  assign s25 = s20[2];
  assign s24 = s20[3];
  assign s23 = s20[4];
  assign s22 = s20[5];
  assign s21 = s20[6];
  controllogic controllogic_i50 (
    .A( s21 ),
    .B( s22 ),
    .C( s23 ),
    .D( s24 ),
    .E( s25 ),
    .F( s26 ),
    .G( s27 ),
    .muxb0( s28 ),
    .muxb1( s29 ),
    .muxb2( s30 ),
    .aluop0( s31 ),
    .aluop1( s32 ),
    .aluop2( s33 ),
    .aluop3( s34 ),
    .aluop4( s35 ),
    .WE( WE ),
    .sf( sf ),
    .iem0( s36 ),
    .iem1( s37 ),
    .br0( s38 ),
    .br1( s39 ),
    .br2( s40 ),
    .muxA( muxA ),
    .ld( ld ),
    .st( st ),
    .abs( abs ),
    .ioW( ioW ),
    .ioR( ioR ),
    .stPC( stPC ),
    .Reti( Reti ),
    .randomSel( RandomNUMSel ),
    .timerSel( timer_Sel ),
    .\read-flags ( read_the_flags ),
    .storeFlagI( store_the_flags )
  );
  assign s9[0] = (ld | stPC | RandomNUMSel);
  assign s9[1] = (ioR | stPC | read_the_flags);
  assign s9[2] = (1'b0 | RandomNUMSel | read_the_flags);
  assign muxB[0] = s30;
  assign muxB[1] = s29;
  assign muxB[2] = s28;
  assign aluOp[0] = s35;
  assign aluOp[1] = s34;
  assign aluOp[2] = s33;
  assign aluOp[3] = s32;
  assign aluOp[4] = s31;
  assign br[0] = s40;
  assign br[1] = s39;
  assign br[2] = s38;
  assign iem[0] = s37;
  assign iem[1] = s36;
  assign s47 = (interEnable & Reti);
  assign s56 = (s55 & ioW);
  assign s59 = (s58 & ioW);
  assign s83 = (s85 & ioW);
  assign inputEn = (s86 & ioR);
  assign interEn = (s87 & ioR);
  assign s49 = (st | st);
  assign s104 = ~ (st | ld);
  Mux_2x1 Mux_2x1_i51 (
    .sel( store_the_flags ),
    .in_0( s108 ),
    .in_1( s109 ),
    .out( s66 )
  );
  Mux_2x1 Mux_2x1_i52 (
    .sel( store_the_flags ),
    .in_0( s107 ),
    .in_1( s110 ),
    .out( s65 )
  );
  Mux_2x1 Mux_2x1_i53 (
    .sel( store_the_flags ),
    .in_0( s106 ),
    .in_1( s111 ),
    .out( s64 )
  );
  assign s17 = (s16 ^ br[2]);
  DriverBus #(
    .Bits(16)
  )
  DriverBus_i54 (
    .in( s80 ),
    .sel( interEn ),
    .out( interruptReg )
  );
  assign s12 = br[1:0];
endmodule
