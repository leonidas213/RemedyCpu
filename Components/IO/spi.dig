<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>spi_master</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,reset_n,enable,cpol,cpha,miso,tx:16</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>sclk,ss_n,mosi,busy,rx:16</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;

ENTITY spi_master IS
  GENERIC(
    data_length : INTEGER := 16);     --data length in bits
  PORT(
    clk     : IN     STD_LOGIC;                             --system clock
    reset_n : IN     STD_LOGIC;                             --asynchronous active low reset
    enable  : IN     STD_LOGIC;                             --initiate communication
	 cpol    : IN     STD_LOGIC;  									--clock polarity mode
    cpha    : IN     STD_LOGIC;  									--clock phase mode
    miso    : IN     STD_LOGIC;                             --master in slave out
    sclk    : OUT    STD_LOGIC;                             --spi clock
    ss_n    : OUT    STD_LOGIC;                             --slave select
    mosi    : OUT    STD_LOGIC;                             --master out slave in
    busy    : OUT    STD_LOGIC;                             --master busy signal
    tx		: IN     STD_LOGIC_VECTOR(16-1 DOWNTO 0);  --data to transmit
    rx	   : OUT    STD_LOGIC_VECTOR(16-1 DOWNTO 0)); --data received
END spi_master;

ARCHITECTURE behavioural OF spi_master IS
  TYPE FSM IS(init, execute);                           		--state machine
  SIGNAL state       : FSM;                             
  SIGNAL receive_transmit : STD_LOGIC;                      --&apos;1&apos; for tx, &apos;0&apos; for rx 
  SIGNAL clk_toggles : INTEGER RANGE 0 TO data_length*2 + 1;    --clock toggle counter
  SIGNAL last_bit		: INTEGER RANGE 0 TO data_length*2;        --last bit indicator
  SIGNAL rxBuffer    : STD_LOGIC_VECTOR(data_length-1 DOWNTO 0) := (OTHERS =&gt; &apos;0&apos;); --receive data buffer
  SIGNAL txBuffer    : STD_LOGIC_VECTOR(data_length-1 DOWNTO 0) := (OTHERS =&gt; &apos;0&apos;); --transmit data buffer
  SIGNAL INT_ss_n    : STD_LOGIC;                            --Internal register for ss_n 
  SIGNAL INT_sclk    : STD_LOGIC;                            --Internal register for sclk 


BEGIN
	
  -- wire internal registers to outside	
  ss_n &lt;= INT_ss_n;
  sclk &lt;= INT_sclk;
  
  PROCESS(clk, reset_n)
  BEGIN

    IF(reset_n = &apos;0&apos;) THEN        --reset everything
      busy &lt;= &apos;1&apos;;                
      INT_ss_n &lt;= &apos;1&apos;;            
      mosi &lt;= &apos;Z&apos;;                
      rx &lt;= (OTHERS =&gt; &apos;0&apos;);      
      state &lt;= init;              

    ELSIF(falling_edge(clk)) THEN
      CASE state IS               

        WHEN init =&gt;					 -- bus is idle
          busy &lt;= &apos;0&apos;;             
          INT_ss_n &lt;= &apos;1&apos;; 		  
          mosi &lt;= &apos;Z&apos;;             
   
          IF(enable = &apos;1&apos;) THEN       		--initiate communication
            busy &lt;= &apos;1&apos;;             
            INT_sclk &lt;= cpol;        		--set spi clock polarity
            receive_transmit &lt;= NOT cpha; --set spi clock phase
            txBuffer &lt;= tx;    				--put data to buffer to transmit
            clk_toggles &lt;= 0;        		--initiate clock toggle counter
            last_bit &lt;= data_length*2 + conv_integer(cpha) - 1; --set last rx data bit
            state &lt;= execute;        
          ELSE
            state &lt;= init;          
          END IF;


        WHEN execute =&gt;
          busy &lt;= &apos;1&apos;;               
          INT_ss_n &lt;= &apos;0&apos;;           						--pull the slave select signal down
			 receive_transmit &lt;= NOT receive_transmit;   --change receive transmit mode
          
			 -- counter
			 IF(clk_toggles = data_length*2 + 1) THEN
				clk_toggles &lt;= 0;               				--reset counter
          ELSE
				clk_toggles &lt;= clk_toggles + 1; 				--increment counter
          END IF;
            
          -- toggle sclk
          IF(clk_toggles &lt;= data_length*2 AND INT_ss_n = &apos;0&apos;) THEN 
            INT_sclk &lt;= NOT INT_sclk; --toggle spi clock
          END IF;
            
          --receive miso bit
          IF(receive_transmit = &apos;0&apos; AND clk_toggles &lt; last_bit + 1 AND INT_ss_n = &apos;0&apos;) THEN 
            rxBuffer &lt;= rxBuffer(data_length-2 DOWNTO 0) &amp; miso; 
          END IF;
            
          --transmit mosi bit
          IF(receive_transmit = &apos;1&apos; AND clk_toggles &lt; last_bit) THEN 
            mosi &lt;= txBuffer(data_length-1);                    
            txBuffer &lt;= txBuffer(data_length-2 DOWNTO 0) &amp; &apos;0&apos;; 
          END IF;
            
          -- Finish/ resume the communication
          IF(clk_toggles = data_length*2 + 1) THEN   
            busy &lt;= &apos;0&apos;;             
            INT_ss_n &lt;= &apos;1&apos;;         
            mosi &lt;= &apos;Z&apos;;             
            rx &lt;= rxBuffer;    
            state &lt;= init;          
          ELSE                       
            state &lt;= execute;        
          END IF;
      END CASE;
    END IF;
  END PROCESS; 
END behavioural;</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="460" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>DipSwitch</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>dipDefault</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="360" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>DipSwitch</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="320" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>DipSwitch</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>dipDefault</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="280" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>DipSwitch</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>dipDefault</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="400" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>a</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="380" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>runRealTime</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>sdfsdfz</string>
        </entry>
        <entry>
          <string>Frequency</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="440" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>spi_slave</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>reset_n,cpol,cpha,sclk,ss_n,mosi,rx_enable,tx:16</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>miso,rx:16,busy</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
--this is comment
ENTITY spi_slave IS
  PORT(
    reset_n      : IN     STD_LOGIC;  																	 --asynchronous active low reset
    cpol    	  : IN 	  STD_LOGIC;  																	 --clock polarity mode
    cpha    	  : IN 	  STD_LOGIC;  																	 --clock phase mode
    sclk         : IN     STD_LOGIC;  																	 --spi clk
    ss_n         : IN     STD_LOGIC;  																	 --slave select
    mosi         : IN     STD_LOGIC;  																	 --master out slave in
    miso         : OUT    STD_LOGIC;  																	 --master in slave out
    rx_enable    : IN     STD_LOGIC;  																	 --enable signal to wire rxBuffer to outside 
    tx		 : IN     STD_LOGIC_VECTOR(16-1 DOWNTO 0);  						 --data to transmit
    rx		 : OUT    STD_LOGIC_VECTOR(16-1 DOWNTO 0) := (OTHERS =&gt; &apos;0&apos;);  --data received
    busy         : OUT    STD_LOGIC := &apos;0&apos;);  														 --slave busy signal	 
END spi_slave;

ARCHITECTURE behavioural OF spi_slave IS
  SIGNAL mode    : STD_LOGIC;  																	  --according to CPOL and CPHA
  SIGNAL clk     : STD_LOGIC;  
  SIGNAL bit_counter : STD_LOGIC_VECTOR(16 DOWNTO 0); 						  --active bit indicator
  SIGNAL rxBuffer  : STD_LOGIC_VECTOR(16-1 DOWNTO 0) := (OTHERS =&gt; &apos;0&apos;);  --receiver buffer
  SIGNAL txBuffer  : STD_LOGIC_VECTOR(16-1 DOWNTO 0) := (OTHERS =&gt; &apos;0&apos;);  --transmit buffer
BEGIN
  busy &lt;= NOT ss_n;  
  
  mode &lt;= cpol XOR cpha;  

  PROCESS (mode, ss_n, sclk)
  BEGIN
  IF(ss_n = &apos;1&apos;) then
     clk &lt;= &apos;0&apos;;
  ELSE
     IF (mode = &apos;1&apos;) then
	     clk &lt;= sclk;
	  ELSE
	     clk &lt;= NOT sclk;
	  END IF;
  END IF;
  END PROCESS;

  --where is the active bit
  PROCESS(ss_n, clk)
  BEGIN
    IF(ss_n = &apos;1&apos; OR reset_n = &apos;0&apos;) THEN                         
	   bit_counter &lt;= (others =&gt; &apos;0&apos;);
if cpha = &apos;1&apos; then
  bit_counter(0) &lt;= &apos;1&apos;;
else
  bit_counter(1) &lt;= &apos;1&apos;;
	end if; 
    ELSE                                                         
      IF(rising_edge(clk)) THEN                                  
        bit_counter &lt;= bit_counter(16-1 DOWNTO 0) &amp; &apos;0&apos;;    --left shift active bit indicator
      END IF;
    END IF;
  END PROCESS;


  PROCESS(ss_n, clk, rx_enable, reset_n)
  BEGIN      
  
	 --receive mosi bit
    IF(cpha = &apos;0&apos;) then
		 IF(reset_n = &apos;0&apos;) THEN			--reset the buffer
			rxBuffer &lt;= (OTHERS =&gt; &apos;0&apos;);
		 ELSIF(bit_counter /= &quot;00000000000000010&quot; and falling_edge(clk)) THEN
			rxBuffer(16-1 DOWNTO 0) &lt;= rxBuffer(16-2 DOWNTO 0) &amp; mosi;  --shift in the received bit
		 END IF;
	 ELSE
		 IF(reset_n = &apos;0&apos;) THEN       --reset the buffer
			rxBuffer &lt;= (OTHERS =&gt; &apos;0&apos;);
		 ELSIF(bit_counter /= &quot;00000000000000001&quot; and falling_edge(clk)) THEN
			rxBuffer(16-1 DOWNTO 0) &lt;= rxBuffer(16-2 DOWNTO 0) &amp; mosi;  --shift in the received bit
		 END IF;
	 END IF;

    --if user wants the received data output it
    IF(reset_n = &apos;0&apos;) THEN
      rx &lt;= (OTHERS =&gt; &apos;0&apos;);
    ELSIF(ss_n = &apos;1&apos; AND rx_enable = &apos;1&apos;) THEN  
      rx &lt;= rxBuffer;
    END IF;

    --transmit registers
    IF(reset_n = &apos;0&apos;) THEN
      txBuffer &lt;= (OTHERS =&gt; &apos;0&apos;);
    ELSIF(ss_n = &apos;1&apos;) THEN  
      txBuffer &lt;= tx;
    ELSIF(bit_counter(16) = &apos;0&apos; AND rising_edge(clk)) THEN
      txBuffer(16-1 DOWNTO 0) &lt;= txBuffer(16-2 DOWNTO 0) &amp; txBuffer(16-1);  --shift through tx data
    END IF;

    --transmit miso bit
    IF(ss_n = &apos;1&apos; OR reset_n = &apos;0&apos;) THEN           
      miso &lt;= &apos;Z&apos;;
    ELSIF(rising_edge(clk)) THEN
      miso &lt;= txBuffer(16-1);               
    END IF;
    
  END PROCESS;
END behavioural;</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="820" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>b</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="780" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>dfdf</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="1100" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>sdsd</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="680" y="520"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="360" y="480"/>
      <p2 x="460" y="480"/>
    </wire>
    <wire>
      <p1 x="620" y="480"/>
      <p2 x="680" y="480"/>
    </wire>
    <wire>
      <p1 x="680" y="320"/>
      <p2 x="820" y="320"/>
    </wire>
    <wire>
      <p1 x="980" y="260"/>
      <p2 x="1040" y="260"/>
    </wire>
    <wire>
      <p1 x="280" y="260"/>
      <p2 x="820" y="260"/>
    </wire>
    <wire>
      <p1 x="280" y="520"/>
      <p2 x="460" y="520"/>
    </wire>
    <wire>
      <p1 x="620" y="520"/>
      <p2 x="680" y="520"/>
    </wire>
    <wire>
      <p1 x="800" y="360"/>
      <p2 x="820" y="360"/>
    </wire>
    <wire>
      <p1 x="260" y="680"/>
      <p2 x="1060" y="680"/>
    </wire>
    <wire>
      <p1 x="400" y="460"/>
      <p2 x="460" y="460"/>
    </wire>
    <wire>
      <p1 x="620" y="460"/>
      <p2 x="660" y="460"/>
    </wire>
    <wire>
      <p1 x="660" y="300"/>
      <p2 x="820" y="300"/>
    </wire>
    <wire>
      <p1 x="980" y="240"/>
      <p2 x="1100" y="240"/>
    </wire>
    <wire>
      <p1 x="320" y="240"/>
      <p2 x="820" y="240"/>
    </wire>
    <wire>
      <p1 x="380" y="560"/>
      <p2 x="460" y="560"/>
    </wire>
    <wire>
      <p1 x="320" y="500"/>
      <p2 x="460" y="500"/>
    </wire>
    <wire>
      <p1 x="780" y="500"/>
      <p2 x="800" y="500"/>
    </wire>
    <wire>
      <p1 x="620" y="500"/>
      <p2 x="660" y="500"/>
    </wire>
    <wire>
      <p1 x="360" y="340"/>
      <p2 x="820" y="340"/>
    </wire>
    <wire>
      <p1 x="640" y="280"/>
      <p2 x="820" y="280"/>
    </wire>
    <wire>
      <p1 x="440" y="440"/>
      <p2 x="460" y="440"/>
    </wire>
    <wire>
      <p1 x="620" y="440"/>
      <p2 x="640" y="440"/>
    </wire>
    <wire>
      <p1 x="260" y="540"/>
      <p2 x="460" y="540"/>
    </wire>
    <wire>
      <p1 x="400" y="220"/>
      <p2 x="820" y="220"/>
    </wire>
    <wire>
      <p1 x="980" y="220"/>
      <p2 x="1060" y="220"/>
    </wire>
    <wire>
      <p1 x="800" y="360"/>
      <p2 x="800" y="500"/>
    </wire>
    <wire>
      <p1 x="400" y="120"/>
      <p2 x="400" y="220"/>
    </wire>
    <wire>
      <p1 x="400" y="220"/>
      <p2 x="400" y="460"/>
    </wire>
    <wire>
      <p1 x="640" y="280"/>
      <p2 x="640" y="440"/>
    </wire>
    <wire>
      <p1 x="320" y="120"/>
      <p2 x="320" y="240"/>
    </wire>
    <wire>
      <p1 x="320" y="240"/>
      <p2 x="320" y="500"/>
    </wire>
    <wire>
      <p1 x="1060" y="220"/>
      <p2 x="1060" y="680"/>
    </wire>
    <wire>
      <p1 x="660" y="300"/>
      <p2 x="660" y="460"/>
    </wire>
    <wire>
      <p1 x="260" y="540"/>
      <p2 x="260" y="680"/>
    </wire>
    <wire>
      <p1 x="680" y="320"/>
      <p2 x="680" y="480"/>
    </wire>
    <wire>
      <p1 x="280" y="120"/>
      <p2 x="280" y="260"/>
    </wire>
    <wire>
      <p1 x="280" y="260"/>
      <p2 x="280" y="520"/>
    </wire>
    <wire>
      <p1 x="360" y="120"/>
      <p2 x="360" y="340"/>
    </wire>
    <wire>
      <p1 x="360" y="340"/>
      <p2 x="360" y="480"/>
    </wire>
    <wire>
      <p1 x="440" y="100"/>
      <p2 x="440" y="440"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>